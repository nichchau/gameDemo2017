{"version":3,"file":"categorical-chart.js","sources":["categorical-chart.js"],"sourcesContent":["import ErrorRangeCalculator from './error-bars/error-range-calculator';\nimport CategoricalErrorBar from './error-bars/categorical-error-bar';\n\nimport SeriesBinder from './series-binder';\nimport { ERROR_LOW_FIELD, ERROR_HIGH_FIELD } from './constants';\n\nimport evalOptions from './utils/eval-options';\nimport categoriesCount from './utils/categories-count';\n\nimport { ChartElement, Box } from '../core';\n\nimport { VALUE, STRING, MIN_VALUE, MAX_VALUE } from '../common/constants';\nimport { deepExtend, defined, isNumber, setDefaultOptions, sparseArrayLimits } from '../common';\n\nclass CategoricalChart extends ChartElement {\n    constructor(plotArea, options) {\n        super(options);\n\n        this.plotArea = plotArea;\n        this.chartService = plotArea.chartService;\n        this.categoryAxis = plotArea.seriesCategoryAxis(options.series[0]);\n\n        // Value axis ranges grouped by axis name, e.g.:\n        // primary: { min: 0, max: 1 }\n        this.valueAxisRanges = {};\n\n        this.points = [];\n        this.categoryPoints = [];\n        this.seriesPoints = [];\n        this.seriesOptions = [];\n        this._evalSeries = [];\n\n        this.render();\n    }\n\n    render() {\n        this.traverseDataPoints(this.addValue.bind(this));\n    }\n\n    pointOptions(series, seriesIx) {\n        let options = this.seriesOptions[seriesIx];\n        if (!options) {\n            const defaults = this.pointType().prototype.defaults;\n            this.seriesOptions[seriesIx] = options = deepExtend({ }, defaults, {\n                vertical: !this.options.invertAxes\n            }, series);\n        }\n\n        return options;\n    }\n\n    plotValue(point) {\n        if (!point) {\n            return 0;\n        }\n\n        if (this.options.isStacked100 && isNumber(point.value)) {\n            const categoryIx = point.categoryIx;\n            const categoryPoints = this.categoryPoints[categoryIx];\n            const otherValues = [];\n            let categorySum = 0;\n\n            for (let i = 0; i < categoryPoints.length; i++) {\n                const other = categoryPoints[i];\n                if (other) {\n                    const stack = point.series.stack;\n                    const otherStack = other.series.stack;\n\n                    if ((stack && otherStack) && stack.group !== otherStack.group) {\n                        continue;\n                    }\n\n                    if (isNumber(other.value)) {\n                        categorySum += Math.abs(other.value);\n                        otherValues.push(Math.abs(other.value));\n                    }\n                }\n            }\n\n            if (categorySum > 0) {\n                return point.value / categorySum;\n            }\n        }\n\n        return point.value;\n    }\n\n    plotRange(point, startValue = 0) {\n        const categoryPoints = this.categoryPoints[point.categoryIx];\n\n        if (this.options.isStacked) {\n            let plotValue = this.plotValue(point);\n            const positive = plotValue >= 0;\n            let prevValue = startValue;\n            let isStackedBar = false;\n\n            for (let i = 0; i < categoryPoints.length; i++) {\n                const other = categoryPoints[i];\n\n                if (point === other) {\n                    break;\n                }\n\n                const stack = point.series.stack;\n                const otherStack = other.series.stack;\n                if (stack && otherStack) {\n                    if (typeof stack === STRING && stack !== otherStack) {\n                        continue;\n                    }\n\n                    if (stack.group && stack.group !== otherStack.group) {\n                        continue;\n                    }\n                }\n\n                const otherValue = this.plotValue(other);\n                if ((otherValue >= 0 && positive) ||\n                    (otherValue < 0 && !positive)) {\n                    prevValue += otherValue;\n                    plotValue += otherValue;\n                    isStackedBar = true;\n\n                    if (this.options.isStacked100) {\n                        plotValue = Math.min(plotValue, 1);\n                    }\n                }\n            }\n\n            if (isStackedBar) {\n                prevValue -= startValue;\n            }\n\n            return [ prevValue, plotValue ];\n        }\n\n        const series = point.series;\n        const valueAxis = this.seriesValueAxis(series);\n        const axisCrossingValue = this.categoryAxisCrossingValue(valueAxis);\n\n        return [ axisCrossingValue, point.value || axisCrossingValue ];\n    }\n\n    stackLimits(axisName, stackName) {\n        let min = MAX_VALUE;\n        let max = MIN_VALUE;\n\n        for (let i = 0; i < this.categoryPoints.length; i++) {\n            const categoryPoints = this.categoryPoints[i];\n            if (!categoryPoints) {\n                continue;\n            }\n\n            for (let pIx = 0; pIx < categoryPoints.length; pIx++) {\n                const point = categoryPoints[pIx];\n                if (point) {\n                    if (point.series.stack === stackName || point.series.axis === axisName) {\n                        const to = this.plotRange(point, 0)[1];\n                        if (defined(to) && isFinite(to)) {\n                            max = Math.max(max, to);\n                            min = Math.min(min, to);\n                        }\n                    }\n                }\n            }\n        }\n\n        return { min: min, max: max };\n    }\n\n    updateStackRange() {\n        const { isStacked, series: chartSeries } = this.options;\n        const limitsCache = {};\n\n        if (isStacked) {\n            for (let i = 0; i < chartSeries.length; i++) {\n                const series = chartSeries[i];\n                const axisName = series.axis;\n                const key = axisName + series.stack;\n\n                let limits = limitsCache[key];\n                if (!limits) {\n                    limits = this.stackLimits(axisName, series.stack);\n\n                    const errorTotals = this.errorTotals;\n                    if (errorTotals) {\n                        if (errorTotals.negative.length) {\n                            limits.min = Math.min(limits.min, sparseArrayLimits(errorTotals.negative).min);\n                        }\n                        if (errorTotals.positive.length) {\n                            limits.max = Math.max(limits.max, sparseArrayLimits(errorTotals.positive).max);\n                        }\n                    }\n\n                    if (limits.min !== MAX_VALUE || limits.max !== MIN_VALUE) {\n                        limitsCache[key] = limits;\n                    } else {\n                        limits = null;\n                    }\n                }\n\n                if (limits) {\n                    this.valueAxisRanges[axisName] = limits;\n                }\n            }\n        }\n    }\n\n    addErrorBar(point, data, categoryIx) {\n        const { value, series, seriesIx } = point;\n        const errorBars = point.options.errorBars;\n        const lowValue = data.fields[ERROR_LOW_FIELD];\n        const highValue = data.fields[ERROR_HIGH_FIELD];\n        let errorRange;\n\n        if (isNumber(lowValue) && isNumber(highValue)) {\n            errorRange = { low: lowValue, high: highValue };\n        } else if (errorBars && defined(errorBars.value)) {\n            this.seriesErrorRanges = this.seriesErrorRanges || [];\n            this.seriesErrorRanges[seriesIx] = this.seriesErrorRanges[seriesIx] ||\n                new ErrorRangeCalculator(errorBars.value, series, VALUE);\n\n            errorRange = this.seriesErrorRanges[seriesIx].getErrorRange(value, errorBars.value);\n        }\n\n        if (errorRange) {\n            point.low = errorRange.low;\n            point.high = errorRange.high;\n            this.addPointErrorBar(point, categoryIx);\n        }\n    }\n\n    addPointErrorBar(point, categoryIx) {\n        const isVertical = !this.options.invertAxes;\n        const options = point.options.errorBars;\n        let { series, low, high } = point;\n\n        if (this.options.isStacked) {\n            const stackedErrorRange = this.stackedErrorRange(point, categoryIx);\n            low = stackedErrorRange.low;\n            high = stackedErrorRange.high;\n        } else {\n            const fields = { categoryIx: categoryIx, series: series };\n            this.updateRange({ value: low }, fields);\n            this.updateRange({ value: high }, fields);\n        }\n\n        const errorBar = new CategoricalErrorBar(low, high, isVertical, this, series, options);\n        point.errorBars = [ errorBar ];\n        point.append(errorBar);\n    }\n\n    stackedErrorRange(point, categoryIx) {\n        const plotValue = this.plotRange(point, 0)[1] - point.value;\n        const low = point.low + plotValue;\n        const high = point.high + plotValue;\n\n        this.errorTotals = this.errorTotals || { positive: [], negative: [] };\n\n        if (low < 0) {\n            this.errorTotals.negative[categoryIx] = Math.min(this.errorTotals.negative[categoryIx] || 0, low);\n        }\n\n        if (high > 0) {\n            this.errorTotals.positive[categoryIx] = Math.max(this.errorTotals.positive[categoryIx] || 0, high);\n        }\n\n        return { low: low, high: high };\n    }\n\n    addValue(data, fields) {\n        const { categoryIx, series, seriesIx } = fields;\n\n        let categoryPoints = this.categoryPoints[categoryIx];\n        if (!categoryPoints) {\n            this.categoryPoints[categoryIx] = categoryPoints = [];\n        }\n\n        let seriesPoints = this.seriesPoints[seriesIx];\n        if (!seriesPoints) {\n            this.seriesPoints[seriesIx] = seriesPoints = [];\n        }\n\n        const point = this.createPoint(data, fields);\n        if (point) {\n            Object.assign(point, fields);\n\n            point.owner = this;\n            point.dataItem = series.data[categoryIx];\n            point.noteText = data.fields.noteText;\n            this.addErrorBar(point, data, categoryIx);\n        }\n\n        this.points.push(point);\n        seriesPoints.push(point);\n        categoryPoints.push(point);\n\n        this.updateRange(data.valueFields, fields);\n    }\n\n    evalPointOptions(options, value, category, categoryIx, series, seriesIx) {\n        const state = { defaults: series._defaults, excluded: [ \"data\", \"aggregate\", \"_events\", \"tooltip\", \"content\", \"template\", \"visual\", \"toggle\", \"_outOfRangeMinPoint\", \"_outOfRangeMaxPoint\" ] };\n\n        let doEval = this._evalSeries[seriesIx];\n        if (!defined(doEval)) {\n            this._evalSeries[seriesIx] = doEval = evalOptions(options, {}, state, true);\n        }\n\n        let pointOptions = options;\n        if (doEval) {\n            pointOptions = deepExtend({}, pointOptions);\n            evalOptions(pointOptions, {\n                value: value,\n                category: category,\n                index: categoryIx,\n                series: series,\n                dataItem: series.data[categoryIx]\n            }, state);\n        }\n\n        return pointOptions;\n    }\n\n    updateRange(data, fields) {\n        const axisName = fields.series.axis;\n        const value = data.value;\n        let axisRange = this.valueAxisRanges[axisName];\n\n        if (isFinite(value) && value !== null) {\n            axisRange = this.valueAxisRanges[axisName] =\n                axisRange || { min: MAX_VALUE, max: MIN_VALUE };\n\n            axisRange.min = Math.min(axisRange.min, value);\n            axisRange.max = Math.max(axisRange.max, value);\n        }\n    }\n\n    seriesValueAxis(series) {\n        const plotArea = this.plotArea;\n        const axisName = series.axis;\n        const axis = axisName ? plotArea.namedValueAxes[axisName] : plotArea.valueAxis;\n\n        if (!axis) {\n            throw new Error(\"Unable to locate value axis with name \" + axisName);\n        }\n\n        return axis;\n    }\n\n    reflow(targetBox) {\n        const categorySlots = this.categorySlots = [];\n        const chartPoints = this.points;\n        const categoryAxis = this.categoryAxis;\n        let pointIx = 0;\n\n        this.traverseDataPoints((data, fields) => {\n            const { categoryIx, series: currentSeries } = fields;\n\n            const valueAxis = this.seriesValueAxis(currentSeries);\n            const point = chartPoints[pointIx++];\n\n            let categorySlot = categorySlots[categoryIx];\n            if (!categorySlot) {\n                categorySlots[categoryIx] = categorySlot =\n                    this.categorySlot(categoryAxis, categoryIx, valueAxis);\n            }\n\n            if (point) {\n                const plotRange = this.plotRange(point, valueAxis.startValue());\n                const valueSlot = valueAxis.getSlot(plotRange[0], plotRange[1], !this.options.clip);\n                if (valueSlot) {\n                    const pointSlot = this.pointSlot(categorySlot, valueSlot);\n\n                    point.aboveAxis = this.aboveAxis(point, valueAxis);\n                    point.stackValue = plotRange[1];\n\n                    if (this.options.isStacked100) {\n                        point.percentage = this.plotValue(point);\n                    }\n\n                    this.reflowPoint(point, pointSlot);\n                } else {\n                    point.visible = false;\n                }\n            }\n        });\n\n        this.reflowCategories(categorySlots);\n\n        this.box = targetBox;\n    }\n\n    aboveAxis(point, valueAxis) {\n        const axisCrossingValue = this.categoryAxisCrossingValue(valueAxis);\n        const value = point.value;\n\n        return valueAxis.options.reverse ?\n            value < axisCrossingValue : value >= axisCrossingValue;\n    }\n\n    categoryAxisCrossingValue(valueAxis) {\n        const categoryAxis = this.categoryAxis;\n        const options = valueAxis.options;\n        const crossingValues = [].concat(\n            options.axisCrossingValues || options.axisCrossingValue\n        );\n\n        return crossingValues[categoryAxis.axisIndex || 0] || 0;\n    }\n\n    reflowPoint(point, pointSlot) {\n        point.reflow(pointSlot);\n    }\n\n    reflowCategories() { }\n\n    pointSlot(categorySlot, valueSlot) {\n        const options = this.options;\n        const invertAxes = options.invertAxes;\n        const slotX = invertAxes ? valueSlot : categorySlot;\n        const slotY = invertAxes ? categorySlot : valueSlot;\n\n        return new Box(slotX.x1, slotY.y1, slotX.x2, slotY.y2);\n    }\n\n    categorySlot(categoryAxis, categoryIx) {\n        return categoryAxis.getSlot(categoryIx);\n    }\n\n    traverseDataPoints(callback) {\n        const series = this.options.series;\n        const categories = this.categoryAxis.options.categories || [];\n        const count = categoriesCount(series);\n        const seriesCount = series.length;\n\n        for (let seriesIx = 0; seriesIx < seriesCount; seriesIx++) {\n            this._outOfRangeCallback(series[seriesIx], \"_outOfRangeMinPoint\", seriesIx, callback);\n        }\n\n        for (let categoryIx = 0; categoryIx < count; categoryIx++) {\n            for (let seriesIx = 0; seriesIx < seriesCount; seriesIx++) {\n                const currentSeries = series[seriesIx];\n                const currentCategory = categories[categoryIx];\n                const pointData = this._bindPoint(currentSeries, seriesIx, categoryIx);\n\n                callback(pointData, {\n                    category: currentCategory,\n                    categoryIx: categoryIx,\n                    series: currentSeries,\n                    seriesIx: seriesIx\n                });\n            }\n        }\n\n        for (let seriesIx = 0; seriesIx < seriesCount; seriesIx++) {\n            this._outOfRangeCallback(series[seriesIx], \"_outOfRangeMaxPoint\", seriesIx, callback);\n        }\n    }\n\n    _outOfRangeCallback(series, field, seriesIx, callback) {\n        const outOfRangePoint = series[field];\n        if (outOfRangePoint) {\n            const categoryIx = outOfRangePoint.categoryIx;\n            const pointData = this._bindPoint(series, seriesIx, categoryIx, outOfRangePoint.item);\n\n            callback(pointData, {\n                category: outOfRangePoint.category,\n                categoryIx: categoryIx,\n                series: series,\n                seriesIx: seriesIx\n            });\n        }\n    }\n\n    _bindPoint(series, seriesIx, categoryIx, item) {\n        if (!this._bindCache) {\n            this._bindCache = [];\n        }\n\n        let bindCache = this._bindCache[seriesIx];\n        if (!bindCache) {\n            bindCache = this._bindCache[seriesIx] = [];\n        }\n\n        let data = bindCache[categoryIx];\n        if (!data) {\n            data = bindCache[categoryIx] = SeriesBinder.current.bindPoint(series, categoryIx, item);\n        }\n\n        return data;\n    }\n\n    formatPointValue(point, format) {\n        if (point.value === null) {\n            return \"\";\n        }\n\n        return this.chartService.format.auto(format, point.value);\n    }\n\n    pointValue(data) {\n        return data.valueFields.value;\n    }\n}\n\nsetDefaultOptions(CategoricalChart, {\n    series: [],\n    invertAxes: false,\n    isStacked: false,\n    clip: true\n});\n\nexport default CategoricalChart;"],"names":["super","let","const","this","seriesIx"],"mappings":"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"}