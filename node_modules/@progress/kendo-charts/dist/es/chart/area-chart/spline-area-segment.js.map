{"version":3,"file":"spline-area-segment.js","sources":["spline-area-segment.js"],"sourcesContent":["import { drawing as draw, geometry as geom } from '@progress/kendo-drawing';\n\nimport AreaSegment from './area-segment';\nimport LineSegment from '../line-chart/line-segment';\n\nimport { CurveProcessor } from '../../core';\n\nimport { X, Y } from '../../common/constants';\nimport { append, deepExtend, isFunction, last, limitValue } from '../../common';\n\nclass SplineAreaSegment extends AreaSegment {\n    constructor(linePoints, prevSegment, isStacked, currentSeries, seriesIx) {\n        super(linePoints, [], currentSeries, seriesIx);\n\n        this.prevSegment = prevSegment;\n        this.isStacked = isStacked;\n    }\n\n    strokeSegments() {\n        let segments = this._strokeSegments;\n\n        if (!segments) {\n            const curveProcessor = new CurveProcessor(this.options.closed);\n            const linePoints = LineSegment.prototype.points.call(this);\n            segments = this._strokeSegments = curveProcessor.process(linePoints);\n        }\n\n        return segments;\n    }\n\n    createVisual() {\n        const series = this.series;\n        const defaults = series._defaults;\n        let color = series.color;\n\n        if (isFunction(color) && defaults) {\n            color = defaults.color;\n        }\n\n        this.visual = new draw.Group({\n            zIndex: series.zIndex\n        });\n\n        this.createFill({\n            fill: {\n                color: color,\n                opacity: series.opacity\n            },\n            stroke: null\n        });\n\n        this.createStroke({\n            stroke: deepExtend({\n                color: color,\n                opacity: series.opacity,\n                lineCap: \"butt\"\n            }, series.line)\n        });\n    }\n\n    createFill(style) {\n        const strokeSegments = this.strokeSegments();\n        const fillSegments = strokeSegments.slice(0);\n        const prevSegment = this.prevSegment;\n\n        if (this.isStacked && prevSegment) {\n            const prevStrokeSegments = prevSegment.strokeSegments();\n            const prevAnchor = last(prevStrokeSegments).anchor();\n\n            fillSegments.push(new geom.Segment(\n                prevAnchor,\n                prevAnchor,\n                last(strokeSegments).anchor()\n            ));\n\n            const stackSegments = [];\n            for (let idx = prevStrokeSegments.length - 1; idx >= 0; idx--) {\n                const segment = prevStrokeSegments[idx];\n                stackSegments.push(new geom.Segment(\n                    segment.anchor(),\n                    segment.controlOut(),\n                    segment.controlIn()\n                ));\n            }\n\n            append(fillSegments, stackSegments);\n\n            const firstAnchor = fillSegments[0].anchor();\n            fillSegments.push(new geom.Segment(\n                firstAnchor,\n                firstAnchor,\n                last(stackSegments).anchor()\n            ));\n        }\n\n        const fill = new draw.Path(style);\n        fill.segments.push.apply(fill.segments, fillSegments);\n        this.closeFill(fill);\n\n        this.visual.append(fill);\n    }\n\n    closeFill(fillPath) {\n        const chart = this.parent;\n        const prevSegment = this.prevSegment;\n        const plotArea = chart.plotArea;\n        const invertAxes = chart.options.invertAxes;\n        const valueAxis = chart.seriesValueAxis(this.series);\n        const valueAxisLineBox = valueAxis.lineBox();\n        const categoryAxis = plotArea.seriesCategoryAxis(this.series);\n        const categoryAxisLineBox = categoryAxis.lineBox();\n        const pos = invertAxes ? X : Y;\n        const segments = this.strokeSegments();\n        const firstPoint = segments[0].anchor();\n        const lastPoint = last(segments).anchor();\n        let end = invertAxes ? categoryAxisLineBox.x1 : categoryAxisLineBox.y1;\n\n        end = limitValue(end, valueAxisLineBox[pos + 1], valueAxisLineBox[pos + 2]);\n        if (!(chart.options.isStacked && prevSegment) && segments.length > 1) {\n            if (invertAxes) {\n                fillPath.lineTo(end, lastPoint.y)\n                        .lineTo(end, firstPoint.y);\n            } else {\n                fillPath.lineTo(lastPoint.x, end)\n                        .lineTo(firstPoint.x, end);\n            }\n        }\n    }\n\n    createStroke(style) {\n        if (style.stroke.width > 0) {\n            const stroke = new draw.Path(style);\n            stroke.segments.push.apply(stroke.segments, this.strokeSegments());\n\n            this.visual.append(stroke);\n        }\n    }\n}\n\nexport default SplineAreaSegment;"],"names":["super","let","const"],"mappings":"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"}