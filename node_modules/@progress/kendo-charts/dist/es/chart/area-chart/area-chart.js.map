{"version":3,"file":"area-chart.js","sources":["area-chart.js"],"sourcesContent":["import LineChart from '../line-chart/line-chart';\nimport LinePoint from '../line-chart/line-point';\n\nimport AreaSegment from './area-segment';\nimport StepAreaSegment from './step-area-segment';\nimport SplineAreaSegment from './spline-area-segment';\n\nimport { STEP, SMOOTH, ZERO } from '../constants';\n\nclass AreaChart extends LineChart {\n    createSegment(linePoints, currentSeries, seriesIx, prevSegment) {\n        const isStacked = this.options.isStacked;\n        const style = (currentSeries.line || {}).style;\n\n        let stackPoints;\n        if (isStacked && seriesIx > 0 && prevSegment) {\n            const missingValues = this.seriesMissingValues(currentSeries);\n            if (missingValues !== \"gap\") {\n                stackPoints = prevSegment.linePoints;\n            } else {\n                stackPoints = this._gapStackPoints(linePoints, seriesIx, style);\n            }\n\n            if (style !== STEP) {\n                stackPoints = stackPoints.slice(0).reverse();\n            }\n        }\n\n        if (style === SMOOTH) {\n            return new SplineAreaSegment(linePoints, prevSegment, isStacked, currentSeries, seriesIx);\n        }\n\n        let pointType;\n        if (style === STEP) {\n            pointType = StepAreaSegment;\n        } else {\n            pointType = AreaSegment;\n        }\n\n        return new pointType(linePoints, stackPoints, currentSeries, seriesIx);\n    }\n\n    reflow(targetBox) {\n        super.reflow(targetBox);\n\n        const stackPoints = this._stackPoints;\n        if (stackPoints) {\n            for (let idx = 0; idx < stackPoints.length; idx++) {\n                const stackPoint = stackPoints[idx];\n                const pointSlot = this.categoryAxis.getSlot(stackPoint.categoryIx);\n                stackPoint.reflow(pointSlot);\n            }\n        }\n    }\n\n    _gapStackPoints(linePoints, seriesIx, style) {\n        const seriesPoints = this.seriesPoints;\n        let startIdx = linePoints[0].categoryIx;\n        let length = linePoints.length;\n        if (startIdx < 0) {\n            startIdx = 0;\n            length--;\n        }\n\n        const endIdx = startIdx + length;\n        const pointOffset = this.seriesOptions[0]._outOfRangeMinPoint ? 1 : 0;\n        const stackPoints = [];\n\n        this._stackPoints = this._stackPoints || [];\n        for (let categoryIx = startIdx; categoryIx < endIdx; categoryIx++) {\n            const pointIx = categoryIx + pointOffset;\n            let currentSeriesIx = seriesIx;\n            let point;\n\n            do {\n                currentSeriesIx--;\n                point = seriesPoints[currentSeriesIx][pointIx];\n            } while (currentSeriesIx > 0 && !point);\n\n            if (point) {\n                if (style !== STEP && categoryIx > startIdx && !seriesPoints[currentSeriesIx][pointIx - 1]) {\n                    stackPoints.push(this._previousSegmentPoint(categoryIx, pointIx, pointIx - 1, currentSeriesIx));\n                }\n\n                stackPoints.push(point);\n\n                if (style !== STEP && categoryIx + 1 < endIdx && !seriesPoints[currentSeriesIx][pointIx + 1]) {\n                    stackPoints.push(this._previousSegmentPoint(categoryIx, pointIx, pointIx + 1, currentSeriesIx));\n                }\n            } else {\n                const gapStackPoint = this._createGapStackPoint(categoryIx);\n                this._stackPoints.push(gapStackPoint);\n                stackPoints.push(gapStackPoint);\n            }\n        }\n\n        return stackPoints;\n    }\n\n    _previousSegmentPoint(categoryIx, pointIx, segmentIx, seriesIdx) {\n        const seriesPoints = this.seriesPoints;\n        let index = seriesIdx;\n        let point;\n\n        while (index > 0 && !point) {\n            index--;\n            point = seriesPoints[index][segmentIx];\n        }\n\n        if (!point) {\n            point = this._createGapStackPoint(categoryIx);\n            this._stackPoints.push(point);\n        } else {\n            point = seriesPoints[index][pointIx];\n        }\n\n        return point;\n    }\n\n    _createGapStackPoint(categoryIx) {\n        const options = this.pointOptions({}, 0);\n        const point = new LinePoint(0, options);\n        point.categoryIx = categoryIx;\n        point.series = {};\n\n        return point;\n    }\n\n    seriesMissingValues(series) {\n        return series.missingValues || ZERO;\n    }\n}\n\nexport default AreaChart;"],"names":["const","let","super","this"],"mappings":"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"}