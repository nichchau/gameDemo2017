{"version":3,"file":"error-range-calculator.js","sources":["error-range-calculator.js"],"sourcesContent":["import SeriesBinder from '../series-binder';\n\nimport { OBJECT } from '../../common/constants';\nimport { Class, defined, getter, isArray, isNumber } from '../../common';\n\nconst STD_ERR = \"stderr\";\nconst STD_DEV = \"stddev\";\nconst percentRegex = /percent(?:\\w*)\\((\\d+)\\)/;\nconst standardDeviationRegex = new RegExp(\"^\" + STD_DEV + \"(?:\\\\((\\\\d+(?:\\\\.\\\\d+)?)\\\\))?$\");\n\nclass ErrorRangeCalculator extends Class {\n    constructor(errorValue, series, field) {\n        super();\n\n        this.initGlobalRanges(errorValue, series, field);\n    }\n\n    initGlobalRanges(errorValue, series, field) {\n        const data = series.data;\n        const deviationMatch = standardDeviationRegex.exec(errorValue);\n\n        if (deviationMatch) {\n            this.valueGetter = this.createValueGetter(series, field);\n\n            const average = this.getAverage(data);\n            const deviation = this.getStandardDeviation(data, average, false);\n            const multiple = deviationMatch[1] ? parseFloat(deviationMatch[1]) : 1;\n            const errorRange = { low: average.value - deviation * multiple, high: average.value + deviation * multiple };\n\n            this.globalRange = function() {\n                return errorRange;\n            };\n        } else if (errorValue.indexOf && errorValue.indexOf(STD_ERR) >= 0) {\n            this.valueGetter = this.createValueGetter(series, field);\n            const standardError = this.getStandardError(data, this.getAverage(data));\n\n            this.globalRange = function(value) {\n                return { low: value - standardError, high: value + standardError };\n            };\n        }\n    }\n\n    createValueGetter(series, field) {\n        const data = series.data;\n        const binder = SeriesBinder.current;\n        const valueFields = binder.valueFields(series);\n        const item = defined(data[0]) ? data[0] : {};\n        let valueGetter;\n\n        if (isArray(item)) {\n            const index = field ? valueFields.indexOf(field) : 0;\n            valueGetter = getter(\"[\" + index + \"]\");\n        } else if (isNumber(item)) {\n            valueGetter = getter();\n        } else if (typeof item === OBJECT) {\n            const srcValueFields = binder.sourceFields(series, valueFields);\n            valueGetter = getter(srcValueFields[valueFields.indexOf(field)]);\n        }\n\n        return valueGetter;\n    }\n\n    getErrorRange(pointValue, errorValue) {\n        let low, high, value;\n\n        if (!defined(errorValue)) {\n            return null;\n        }\n\n        if (this.globalRange) {\n            return this.globalRange(pointValue);\n        }\n\n        if (isArray(errorValue)) {\n            low = pointValue - errorValue[0];\n            high = pointValue + errorValue[1];\n        } else if (isNumber(value = parseFloat(errorValue))) {\n            low = pointValue - value;\n            high = pointValue + value;\n        } else if ((value = percentRegex.exec(errorValue))) {\n            const percentValue = pointValue * (parseFloat(value[1]) / 100);\n            low = pointValue - Math.abs(percentValue);\n            high = pointValue + Math.abs(percentValue);\n        } else {\n            throw new Error(\"Invalid ErrorBar value: \" + errorValue);\n        }\n\n        return { low: low, high: high };\n    }\n\n    getStandardError(data, average) {\n        return this.getStandardDeviation(data, average, true) / Math.sqrt(average.count);\n    }\n\n    getStandardDeviation(data, average, isSample) {\n        const length = data.length;\n        const total = isSample ? average.count - 1 : average.count;\n        let squareDifferenceSum = 0;\n\n        for (let idx = 0; idx < length; idx++) {\n            const value = this.valueGetter(data[idx]);\n            if (isNumber(value)) {\n                squareDifferenceSum += Math.pow(value - average.value, 2);\n            }\n        }\n\n        return Math.sqrt(squareDifferenceSum / total);\n    }\n\n    getAverage(data) {\n        const length = data.length;\n        let sum = 0;\n        let count = 0;\n\n        for (let idx = 0; idx < length; idx++) {\n            const value = this.valueGetter(data[idx]);\n            if (isNumber(value)) {\n                sum += value;\n                count++;\n            }\n        }\n\n        return {\n            value: sum / count,\n            count: count\n        };\n    }\n}\n\nexport default ErrorRangeCalculator;"],"names":["const","super","let","this"],"mappings":"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"}