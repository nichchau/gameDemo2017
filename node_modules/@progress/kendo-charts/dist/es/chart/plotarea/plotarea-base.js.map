{"version":3,"file":"plotarea-base.js","sources":["plotarea-base.js"],"sourcesContent":["import { drawing as draw } from '@progress/kendo-drawing';\n\nimport { ChartElement, Box } from '../../core';\nimport Crosshair from '../crosshair/crosshair';\nimport Pane from '../pane';\n\nimport { WHITE, BLACK, X, Y, COORD_PRECISION, TOP, BOTTOM, LEFT, RIGHT } from '../../common/constants';\nimport { append, deepExtend, defined, getSpacing, getTemplate, inArray, isFunction, isString, round, setDefaultOptions } from '../../common';\n\nclass PlotAreaBase extends ChartElement {\n    constructor(series, options, chartService) {\n        super(options);\n\n        this.initFields(series, options);\n        this.series = series;\n        this.initSeries();\n        this.charts = [];\n        this.options.legend.items = [];\n        this.axes = [];\n        this.crosshairs = [];\n        this.chartService = chartService;\n\n        this.createPanes();\n        this.render();\n        this.createCrosshairs();\n    }\n\n    initFields() { }\n\n    initSeries() {\n        const series = this.series;\n\n        for (let i = 0; i < series.length; i++) {\n            series[i].index = i;\n        }\n    }\n\n    createPanes() {\n        const defaults = { title: { color: (this.options.title || {}).color } };\n        const panes = [];\n        const paneOptions = this.options.panes || [];\n        const panesLength = Math.max(paneOptions.length, 1);\n\n        function setTitle(options, defaults) {\n            if (isString(options.title)) {\n                options.title = {\n                    text: options.title\n                };\n            }\n\n            options.title = deepExtend({}, defaults.title, options.title);\n        }\n\n        for (let i = 0; i < panesLength; i++) {\n            const options = paneOptions[i] || {};\n            setTitle(options, defaults);\n\n            const currentPane = new Pane(options);\n            currentPane.paneIndex = i;\n\n            panes.push(currentPane);\n            this.append(currentPane);\n        }\n\n        this.panes = panes;\n    }\n\n    createCrosshairs(panes = this.panes) {\n        for (let i = 0; i < panes.length; i++) {\n            const pane = panes[i];\n            for (let j = 0; j < pane.axes.length; j++) {\n                const axis = pane.axes[j];\n                if (axis.options.crosshair && axis.options.crosshair.visible) {\n                    const currentCrosshair = new Crosshair(this.chartService, axis, axis.options.crosshair);\n\n                    this.crosshairs.push(currentCrosshair);\n                    pane.content.append(currentCrosshair);\n                }\n            }\n        }\n    }\n\n    removeCrosshairs(pane) {\n        const crosshairs = this.crosshairs;\n        const axes = pane.axes;\n\n        for (let i = crosshairs.length - 1; i >= 0; i--) {\n            for (let j = 0; j < axes.length; j++) {\n                if (crosshairs[i].axis === axes[j]) {\n                    crosshairs.splice(i, 1);\n                    break;\n                }\n            }\n        }\n    }\n\n    hideCrosshairs() {\n        const crosshairs = this.crosshairs;\n        for (let idx = 0; idx < crosshairs.length; idx++) {\n            crosshairs[idx].hide();\n        }\n    }\n\n    findPane(name) {\n        const panes = this.panes;\n        let matchingPane;\n\n        for (let i = 0; i < panes.length; i++) {\n            if (panes[i].options.name === name) {\n                matchingPane = panes[i];\n                break;\n            }\n        }\n\n        return matchingPane || panes[0];\n    }\n\n    findPointPane(point) {\n        const panes = this.panes;\n        let matchingPane;\n\n        for (let i = 0; i < panes.length; i++) {\n            if (panes[i].box.containsPoint(point)) {\n                matchingPane = panes[i];\n                break;\n            }\n        }\n\n        return matchingPane;\n    }\n\n    appendAxis(axis) {\n        const pane = this.findPane(axis.options.pane);\n\n        pane.appendAxis(axis);\n        this.axes.push(axis);\n        axis.plotArea = this;\n    }\n\n    removeAxis(axisToRemove) {\n        const filteredAxes = [];\n\n        for (let i = 0; i < this.axes.length; i++) {\n            const axis = this.axes[i];\n            if (axisToRemove !== axis) {\n                filteredAxes.push(axis);\n            } else {\n                axis.destroy();\n            }\n        }\n\n        this.axes = filteredAxes;\n    }\n\n    appendChart(chart, pane) {\n        this.charts.push(chart);\n        if (pane) {\n            pane.appendChart(chart);\n        } else {\n            this.append(chart);\n        }\n    }\n\n    removeChart(chartToRemove) {\n        const filteredCharts = [];\n\n        for (let i = 0; i < this.charts.length; i++) {\n            const chart = this.charts[i];\n            if (chart !== chartToRemove) {\n                filteredCharts.push(chart);\n            } else {\n                chart.destroy();\n            }\n        }\n\n        this.charts = filteredCharts;\n    }\n\n    addToLegend(series) {\n        const count = series.length;\n        const legend = this.options.legend;\n        const labels = legend.labels || {};\n        const inactiveItems = legend.inactiveItems || {};\n        const inactiveItemsLabels = inactiveItems.labels || {};\n        const data = [];\n\n        for (let i = 0; i < count; i++) {\n            const currentSeries = series[i];\n            const seriesVisible = currentSeries.visible !== false;\n            if (currentSeries.visibleInLegend === false) {\n                continue;\n            }\n\n            let text = currentSeries.name || \"\";\n            const labelTemplate = seriesVisible ? getTemplate(labels) : getTemplate(inactiveItemsLabels) || getTemplate(labels);\n            if (labelTemplate) {\n                text = labelTemplate({\n                    text: text,\n                    series: currentSeries\n                });\n            }\n\n            const defaults = currentSeries._defaults;\n            let color = currentSeries.color;\n            if (isFunction(color) && defaults) {\n                color = defaults.color;\n            }\n\n            let itemLabelOptions, markerColor;\n            if (seriesVisible) {\n                itemLabelOptions = {};\n                markerColor = color;\n            } else {\n                itemLabelOptions = {\n                    color: inactiveItemsLabels.color,\n                    font: inactiveItemsLabels.font\n                };\n                markerColor = inactiveItems.markers.color;\n            }\n\n            if (text) {\n                data.push({\n                    text: text,\n                    labels: itemLabelOptions,\n                    markerColor: markerColor,\n                    series: currentSeries,\n                    active: seriesVisible\n                });\n            }\n        }\n\n        append(legend.items, data);\n    }\n\n    groupAxes(panes) {\n        const xAxes = [];\n        const yAxes = [];\n\n        for (let paneIx = 0; paneIx < panes.length; paneIx++) {\n            const paneAxes = panes[paneIx].axes;\n            for (let axisIx = 0; axisIx < paneAxes.length; axisIx++) {\n                const axis = paneAxes[axisIx];\n                if (axis.options.vertical) {\n                    yAxes.push(axis);\n                } else {\n                    xAxes.push(axis);\n                }\n            }\n        }\n\n        return { x: xAxes, y: yAxes, any: xAxes.concat(yAxes) };\n    }\n\n    groupSeriesByPane() {\n        const series = this.series;\n        const seriesByPane = {};\n\n        for (let i = 0; i < series.length; i++) {\n            const currentSeries = series[i];\n            const pane = this.seriesPaneName(currentSeries);\n\n            if (seriesByPane[pane]) {\n                seriesByPane[pane].push(currentSeries);\n            } else {\n                seriesByPane[pane] = [ currentSeries ];\n            }\n        }\n\n        return seriesByPane;\n    }\n\n    filterVisibleSeries(series) {\n        const result = [];\n\n        for (let i = 0; i < series.length; i++) {\n            const currentSeries = series[i];\n            if (currentSeries.visible !== false) {\n                result.push(currentSeries);\n            }\n        }\n\n        return result;\n    }\n\n    reflow(targetBox) {\n        const options = this.options.plotArea;\n        const panes = this.panes;\n        const margin = getSpacing(options.margin);\n\n        this.box = targetBox.clone().unpad(margin);\n        this.reflowPanes();\n\n        this.reflowAxes(panes);\n        this.reflowCharts(panes);\n    }\n\n    redraw(panes) {\n        const panesArray = [].concat(panes);\n        this.initSeries();\n\n        for (let i = 0; i < panesArray.length; i++) {\n            this.removeCrosshairs(panesArray[i]);\n            panesArray[i].empty();\n        }\n\n        this.render(panesArray);\n        this.reflowAxes(this.panes);\n        this.reflowCharts(panesArray);\n\n        this.createCrosshairs(panesArray);\n\n        for (let i = 0; i < panesArray.length; i++) {\n            panesArray[i].refresh();\n        }\n    }\n\n    axisCrossingValues(axis, crossingAxes) {\n        const options = axis.options;\n        const crossingValues = [].concat(\n            options.axisCrossingValues || options.axisCrossingValue\n        );\n        const valuesToAdd = crossingAxes.length - crossingValues.length;\n        const defaultValue = crossingValues[0] || 0;\n\n        for (let i = 0; i < valuesToAdd; i++) {\n            crossingValues.push(defaultValue);\n        }\n\n        return crossingValues;\n    }\n\n    alignAxisTo(axis, targetAxis, crossingValue, targetCrossingValue) {\n        const slot = axis.getSlot(crossingValue, crossingValue, true);\n        const slotEdge = axis.options.reverse ? 2 : 1;\n        const targetSlot = targetAxis.getSlot(targetCrossingValue, targetCrossingValue, true);\n        const targetEdge = targetAxis.options.reverse ? 2 : 1;\n        const axisBox = axis.box.translate(\n            targetSlot[X + targetEdge] - slot[X + slotEdge],\n            targetSlot[Y + targetEdge] - slot[Y + slotEdge]\n        );\n\n        if (axis.pane !== targetAxis.pane) {\n            axisBox.translate(0, axis.pane.box.y1 - targetAxis.pane.box.y1);\n        }\n\n        axis.reflow(axisBox);\n    }\n\n    alignAxes(xAxes, yAxes) {\n        const xAnchor = xAxes[0];\n        const yAnchor = yAxes[0];\n        const xAnchorCrossings = this.axisCrossingValues(xAnchor, yAxes);\n        const yAnchorCrossings = this.axisCrossingValues(yAnchor, xAxes);\n        const leftAnchors = {};\n        const rightAnchors = {};\n        const topAnchors = {};\n        const bottomAnchors = {};\n\n        for (let i = 0; i < yAxes.length; i++) {\n            const axis = yAxes[i];\n            const pane = axis.pane;\n            const paneId = pane.id;\n\n            // Locate pane anchor, if any, and use its axisCrossingValues\n            const anchor = paneAnchor(xAxes, pane) || xAnchor;\n            let anchorCrossings = xAnchorCrossings;\n\n            if (anchor !== xAnchor) {\n                anchorCrossings = this.axisCrossingValues(anchor, yAxes);\n            }\n\n            this.alignAxisTo(axis, anchor, yAnchorCrossings[i], anchorCrossings[i]);\n\n            if (axis.options._overlap) {\n                continue;\n            }\n\n            if (round(axis.lineBox().x1) === round(anchor.lineBox().x1)) {\n                // Push the axis to the left the previous y-axis so they don't overlap\n                if (leftAnchors[paneId]) {\n                    axis.reflow(axis.box\n                        .alignTo(leftAnchors[paneId].box, LEFT)\n                        .translate(-axis.options.margin, 0)\n                    );\n                }\n\n                leftAnchors[paneId] = axis;\n            }\n\n            if (round(axis.lineBox().x2) === round(anchor.lineBox().x2)) {\n                // Flip the labels on the right if we're at the right end of the pane\n                if (!axis._mirrored) {\n                    axis.options.labels.mirror = !axis.options.labels.mirror;\n                    axis._mirrored = true;\n                }\n                this.alignAxisTo(axis, anchor, yAnchorCrossings[i], anchorCrossings[i]);\n\n                // Push the axis to the right the previous y-axis so they don't overlap\n                if (rightAnchors[paneId]) {\n                    axis.reflow(axis.box\n                        .alignTo(rightAnchors[paneId].box, RIGHT)\n                        .translate(axis.options.margin, 0)\n                    );\n                }\n\n                rightAnchors[paneId] = axis;\n            }\n\n            if (i !== 0 && yAnchor.pane === axis.pane) {\n                axis.alignTo(yAnchor);\n                axis.reflow(axis.box);\n            }\n        }\n\n        for (let i = 0; i < xAxes.length; i++) {\n            const axis = xAxes[i];\n            const pane = axis.pane;\n            const paneId = pane.id;\n\n            // Locate pane anchor and use its axisCrossingValues\n            const anchor = paneAnchor(yAxes, pane) || yAnchor;\n            let anchorCrossings = yAnchorCrossings;\n            if (anchor !== yAnchor) {\n                anchorCrossings = this.axisCrossingValues(anchor, xAxes);\n            }\n\n            this.alignAxisTo(axis, anchor, xAnchorCrossings[i], anchorCrossings[i]);\n\n            if (axis.options._overlap) {\n                continue;\n            }\n\n            if (round(axis.lineBox().y1) === round(anchor.lineBox().y1)) {\n                // Flip the labels on top if we're at the top of the pane\n                if (!axis._mirrored) {\n                    axis.options.labels.mirror = !axis.options.labels.mirror;\n                    axis._mirrored = true;\n                }\n                this.alignAxisTo(axis, anchor, xAnchorCrossings[i], anchorCrossings[i]);\n\n                // Push the axis above the previous x-axis so they don't overlap\n                if (topAnchors[paneId]) {\n                    axis.reflow(axis.box\n                        .alignTo(topAnchors[paneId].box, TOP)\n                        .translate(0, -axis.options.margin)\n                    );\n                }\n\n                topAnchors[paneId] = axis;\n            }\n\n            if (round(axis.lineBox().y2, COORD_PRECISION) === round(anchor.lineBox().y2, COORD_PRECISION)) {\n                // Push the axis below the previous x-axis so they don't overlap\n                if (bottomAnchors[paneId]) {\n                    axis.reflow(axis.box\n                        .alignTo(bottomAnchors[paneId].box, BOTTOM)\n                        .translate(0, axis.options.margin)\n                    );\n                }\n\n                bottomAnchors[paneId] = axis;\n            }\n\n            if (i !== 0) {\n                axis.alignTo(xAnchor);\n                axis.reflow(axis.box);\n            }\n        }\n    }\n\n    shrinkAxisWidth(panes) {\n        const axes = this.groupAxes(panes).any;\n        const axisBox = axisGroupBox(axes);\n        let overflowX = 0;\n\n        for (let i = 0; i < panes.length; i++) {\n            const currentPane = panes[i];\n\n            if (currentPane.axes.length > 0) {\n                overflowX = Math.max(\n                    overflowX,\n                    axisBox.width() - currentPane.contentBox.width()\n                );\n            }\n        }\n\n        if (overflowX !== 0) {\n            for (let i = 0; i < axes.length; i++) {\n                const currentAxis = axes[i];\n\n                if (!currentAxis.options.vertical) {\n                    currentAxis.reflow(currentAxis.box.shrink(overflowX, 0));\n                }\n            }\n        }\n    }\n\n    shrinkAxisHeight(panes) {\n        let shrinked;\n\n        for (let i = 0; i < panes.length; i++) {\n            const currentPane = panes[i];\n            const axes = currentPane.axes;\n            const overflowY = Math.max(0, axisGroupBox(axes).height() - currentPane.contentBox.height());\n\n            if (overflowY !== 0) {\n                for (let j = 0; j < axes.length; j++) {\n                    const currentAxis = axes[j];\n\n                    if (currentAxis.options.vertical) {\n                        currentAxis.reflow(\n                            currentAxis.box.shrink(0, overflowY)\n                        );\n                    }\n                }\n                shrinked = true;\n            }\n        }\n\n        return shrinked;\n    }\n\n    fitAxes(panes) {\n        const axes = this.groupAxes(panes).any;\n        let offsetX = 0;\n\n        for (let i = 0; i < panes.length; i++) {\n            const currentPane = panes[i];\n            const paneAxes = currentPane.axes;\n            const paneBox = currentPane.contentBox;\n\n            if (paneAxes.length > 0) {\n                const axisBox = axisGroupBox(paneAxes);\n                // OffsetY is calculated and applied per pane\n                const offsetY = Math.max(paneBox.y1 - axisBox.y1, paneBox.y2 - axisBox.y2);\n\n                // OffsetX is calculated and applied globally\n                offsetX = Math.max(offsetX, paneBox.x1 - axisBox.x1);\n\n\n                for (let j = 0; j < paneAxes.length; j++) {\n                    const currentAxis = paneAxes[j];\n\n                    currentAxis.reflow(\n                        currentAxis.box.translate(0, offsetY)\n                    );\n                }\n            }\n        }\n\n        for (let i = 0; i < axes.length; i++) {\n            const currentAxis = axes[i];\n\n            currentAxis.reflow(\n                currentAxis.box.translate(offsetX, 0)\n            );\n        }\n    }\n\n    reflowAxes(panes) {\n        const axes = this.groupAxes(panes);\n\n        for (let i = 0; i < panes.length; i++) {\n            this.reflowPaneAxes(panes[i]);\n        }\n\n        if (axes.x.length > 0 && axes.y.length > 0) {\n            this.alignAxes(axes.x, axes.y);\n            this.shrinkAxisWidth(panes);\n\n            this.autoRotateAxisLabels(axes);\n\n            this.alignAxes(axes.x, axes.y);\n            if (this.shrinkAxisWidth(panes)) {\n                this.alignAxes(axes.x, axes.y);\n            }\n\n            this.shrinkAxisHeight(panes);\n            this.alignAxes(axes.x, axes.y);\n\n            if (this.shrinkAxisHeight(panes)) {\n                this.alignAxes(axes.x, axes.y);\n            }\n\n            this.fitAxes(panes);\n        }\n    }\n\n    autoRotateAxisLabels(groupedAxes) {\n        const { axes, panes } = this;\n        let rotated;\n\n        for (let idx = 0; idx < axes.length; idx++) {\n            const axis = axes[idx];\n            if (axis.autoRotateLabels()) {\n                rotated = true;\n            }\n        }\n\n        if (rotated) {\n            for (let idx = 0; idx < panes.length; idx++) {\n                this.reflowPaneAxes(panes[idx]);\n            }\n\n            if (groupedAxes.x.length > 0 && groupedAxes.y.length > 0) {\n                this.alignAxes(groupedAxes.x, groupedAxes.y);\n                this.shrinkAxisWidth(panes);\n            }\n        }\n    }\n\n    reflowPaneAxes(pane) {\n        const axes = pane.axes;\n        const length = axes.length;\n\n        if (length > 0) {\n            for (let i = 0; i < length; i++) {\n                axes[i].reflow(pane.contentBox);\n            }\n        }\n    }\n\n    reflowCharts(panes) {\n        const charts = this.charts;\n        const count = charts.length;\n        const box = this.box;\n\n        for (let i = 0; i < count; i++) {\n            const chartPane = charts[i].pane;\n            if (!chartPane || inArray(chartPane, panes)) {\n                charts[i].reflow(box);\n            }\n        }\n    }\n\n    reflowPanes() {\n        const { box, panes } = this;\n        const panesLength = panes.length;\n        let remainingHeight = box.height();\n        let remainingPanes = panesLength;\n        let autoHeightPanes = 0;\n        let top = box.y1;\n\n        for (let i = 0; i < panesLength; i++) {\n            const currentPane = panes[i];\n            const height = currentPane.options.height;\n\n            currentPane.options.width = box.width();\n\n            if (!currentPane.options.height) {\n                autoHeightPanes++;\n            } else {\n                if (height.indexOf && height.indexOf(\"%\")) {\n                    const percents = parseInt(height, 10) / 100;\n                    currentPane.options.height = percents * box.height();\n                }\n\n                currentPane.reflow(box.clone());\n\n                remainingHeight -= currentPane.options.height;\n            }\n        }\n\n        for (let i = 0; i < panesLength; i++) {\n            const currentPane = panes[i];\n\n            if (!currentPane.options.height) {\n                currentPane.options.height = remainingHeight / autoHeightPanes;\n            }\n        }\n\n        for (let i = 0; i < panesLength; i++) {\n            const currentPane = panes[i];\n            const paneBox = box\n                .clone()\n                .move(box.x1, top);\n\n            currentPane.reflow(paneBox);\n\n            remainingPanes--;\n            top += currentPane.options.height;\n        }\n    }\n\n    backgroundBox() {\n        const axes = this.axes;\n        const axesCount = axes.length;\n        let box;\n\n        for (let i = 0; i < axesCount; i++) {\n            const axisA = axes[i];\n\n            for (let j = 0; j < axesCount; j++) {\n                const axisB = axes[j];\n\n                if (axisA.options.vertical !== axisB.options.vertical) {\n                    const lineBox = axisA.lineBox().clone().wrap(axisB.lineBox());\n\n                    if (!box) {\n                        box = lineBox;\n                    } else {\n                        box = box.wrap(lineBox);\n                    }\n                }\n            }\n        }\n\n        return box || this.box;\n    }\n\n    chartsBoxes() {\n        const panes = this.panes;\n        const boxes = [];\n\n        for (let idx = 0; idx < panes.length; idx++) {\n            boxes.push(panes[idx].chartsBox());\n        }\n\n        return boxes;\n    }\n\n    addBackgroundPaths(multipath) {\n        const boxes = this.chartsBoxes();\n        for (let idx = 0; idx < boxes.length; idx++) {\n            multipath.paths.push(draw.Path.fromRect(boxes[idx].toRect()));\n        }\n    }\n\n    backgroundContainsPoint(point) {\n        const boxes = this.chartsBoxes();\n        for (let idx = 0; idx < boxes.length; idx++) {\n            if (boxes[idx].containsPoint(point)) {\n                return true;\n            }\n        }\n    }\n\n    createVisual() {\n        super.createVisual();\n\n        const options = this.options.plotArea;\n        let { opacity, background, border = {} } = options;\n        if (isTransparent(background)) {\n            background = WHITE;\n            opacity = 0;\n        }\n\n        const bg = this._bgVisual = new draw.MultiPath({\n            fill: {\n                color: background,\n                opacity: opacity\n            },\n            stroke: {\n                color: border.width ? border.color : \"\",\n                width: border.width,\n                dashType: border.dashType\n            },\n            zIndex: -1\n        });\n\n        this.addBackgroundPaths(bg);\n\n        this.appendVisual(bg);\n    }\n\n    pointsByCategoryIndex(categoryIndex) {\n        const charts = this.charts;\n        const result = [];\n\n        if (categoryIndex !== null) {\n            for (let i = 0; i < charts.length; i++) {\n                const chart = charts[i];\n                if (chart.pane.options.name === \"_navigator\") {\n                    continue;\n                }\n\n                const points = charts[i].categoryPoints[categoryIndex];\n                if (points && points.length) {\n                    for (let j = 0; j < points.length; j++) {\n                        const point = points[j];\n                        if (point && defined(point.value) && point.value !== null) {\n                            result.push(point);\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    pointsBySeriesIndex(seriesIndex) {\n        return this.filterPoints(function(point) {\n            return point.series.index === seriesIndex;\n        });\n    }\n\n    pointsBySeriesName(name) {\n        return this.filterPoints(function(point) {\n            return point.series.name === name;\n        });\n    }\n\n    filterPoints(callback) {\n        const charts = this.charts;\n        const result = [];\n\n        for (let i = 0; i < charts.length; i++) {\n            const chart = charts[i];\n            const points = chart.points;\n            for (let j = 0; j < points.length; j++) {\n                const point = points[j];\n                if (point && callback(point)) {\n                    result.push(point);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    findPoint(callback) {\n        const charts = this.charts;\n\n        for (let i = 0; i < charts.length; i++) {\n            const chart = charts[i];\n            const points = chart.points;\n            for (let j = 0; j < points.length; j++) {\n                const point = points[j];\n                if (point && callback(point)) {\n                    return point;\n                }\n            }\n        }\n    }\n\n    paneByPoint(point) {\n        const panes = this.panes;\n\n        for (let i = 0; i < panes.length; i++) {\n            const pane = panes[i];\n            if (pane.box.containsPoint(point)) {\n                return pane;\n            }\n        }\n    }\n}\n\nfunction axisGroupBox(axes) {\n    const length = axes.length;\n    let box;\n\n    if (length > 0) {\n        for (let i = 0; i < length; i++) {\n            const axisBox = axes[i].contentBox();\n\n            if (!box) {\n                box = axisBox.clone();\n            } else {\n                box.wrap(axisBox);\n            }\n        }\n    }\n\n    return box || new Box();\n}\n\nfunction paneAnchor(axes, pane) {\n    for (let i = 0; i < axes.length; i++) {\n        const anchor = axes[i];\n        if (anchor && anchor.pane === pane) {\n            return anchor;\n        }\n    }\n}\n\nfunction isTransparent(color) {\n    return color === \"\" || color === null || color === \"none\" || color === \"transparent\" || !defined(color);\n}\n\n\nsetDefaultOptions(PlotAreaBase, {\n    series: [],\n    plotArea: {\n        margin: {}\n    },\n    background: \"\",\n    border: {\n        color: BLACK,\n        width: 0\n    },\n    legend: {\n        inactiveItems: {\n            labels: {\n                color: \"#919191\"\n            },\n            markers: {\n                color: \"#919191\"\n            }\n        }\n    }\n});\n\nexport default PlotAreaBase;"],"names":["super","const","let","this","i","axis","pane","paneId","anchor","anchorCrossings","currentAxis","idx","currentPane"],"mappings":"AAAA,SAAS,OAAO,IAAI,IAAI,QAAQ,yBAAyB,CAAC;;AAE1D,SAAS,YAAY,EAAE,GAAG,QAAQ,YAAY,CAAC;AAC/C,OAAO,SAAS,MAAM,wBAAwB,CAAC;AAC/C,OAAO,IAAI,MAAM,SAAS,CAAC;;AAE3B,SAAS,KAAK,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,eAAe,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,QAAQ,wBAAwB,CAAC;AACvG,SAAS,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,UAAU,EAAE,WAAW,EAAE,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAE,iBAAiB,QAAQ,cAAc,CAAC;;AAE7I,IAAM,YAAY,GAAqB;IAAC,AACpC,qBAAW,CAAC,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE;QACvCA,YAAK,KAAA,CAAC,MAAA,OAAO,CAAC,CAAC;;QAEf,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACjC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,GAAG,EAAE,CAAC;QAC/B,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QACf,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;;QAEjC,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,MAAM,EAAE,CAAC;QACd,IAAI,CAAC,gBAAgB,EAAE,CAAC;KAC3B;;;;sDAAA;;IAED,uBAAA,UAAU,uBAAA,GAAG,GAAG,CAAA;;IAEhB,uBAAA,UAAU,uBAAA,GAAG;QACTC,GAAK,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;;QAE3B,KAAKC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC;SACvB;KACJ,CAAA;;IAED,uBAAA,WAAW,wBAAA,GAAG,CAAC;;AAAA;QACXD,GAAK,CAAC,QAAQ,GAAG,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC;QACxEA,GAAK,CAAC,KAAK,GAAG,EAAE,CAAC;QACjBA,GAAK,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC;QAC7CA,GAAK,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;;QAEpD,SAAS,QAAQ,CAAC,OAAO,EAAE,QAAQ,EAAE;YACjC,IAAI,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACzB,OAAO,CAAC,KAAK,GAAG;oBACZ,IAAI,EAAE,OAAO,CAAC,KAAK;iBACtB,CAAC;aACL;;YAED,OAAO,CAAC,KAAK,GAAG,UAAU,CAAC,EAAE,EAAE,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;SACjE;;QAED,KAAKC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;YAClCD,GAAK,CAAC,OAAO,GAAG,WAAW,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YACrC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;;YAE5BA,GAAK,CAAC,WAAW,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;YACtC,WAAW,CAAC,SAAS,GAAG,CAAC,CAAC;;YAE1B,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACxBE,MAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;SAC5B;;QAED,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;KACtB,CAAA;;IAED,uBAAA,gBAAgB,6BAAA,CAAC,KAAkB,EAAE,CAAC;0BAAhB;qCAAA,GAAG,IAAI,CAAC,KAAK;AAAG;QAClC,KAAKD,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnCD,GAAK,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,KAAKC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACvCD,GAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC1B,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,EAAE;oBAC1DA,GAAK,CAAC,gBAAgB,GAAG,IAAI,SAAS,CAACE,MAAI,CAAC,YAAY,EAAE,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;;oBAExFA,MAAI,CAAC,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;oBACvC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;iBACzC;aACJ;SACJ;KACJ,CAAA;;IAED,uBAAA,gBAAgB,6BAAA,CAAC,IAAI,EAAE;QACnBF,GAAK,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QACnCA,GAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;;QAEvB,KAAKC,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;YAC7C,KAAKA,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAClC,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE;oBAChC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBACxB,MAAM;iBACT;aACJ;SACJ;KACJ,CAAA;;IAED,uBAAA,cAAc,2BAAA,GAAG;QACbD,GAAK,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QACnC,KAAKC,GAAG,CAAC,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,UAAU,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;YAC9C,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;SAC1B;KACJ,CAAA;;IAED,uBAAA,QAAQ,qBAAA,CAAC,IAAI,EAAE;QACXD,GAAK,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACzBC,GAAG,CAAC,YAAY,CAAC;;QAEjB,KAAKA,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,IAAI,EAAE;gBAChC,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACxB,MAAM;aACT;SACJ;;QAED,OAAO,YAAY,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;KACnC,CAAA;;IAED,uBAAA,aAAa,0BAAA,CAAC,KAAK,EAAE;QACjBD,GAAK,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACzBC,GAAG,CAAC,YAAY,CAAC;;QAEjB,KAAKA,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;gBACnC,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACxB,MAAM;aACT;SACJ;;QAED,OAAO,YAAY,CAAC;KACvB,CAAA;;IAED,uBAAA,UAAU,uBAAA,CAAC,IAAI,EAAE;QACbD,GAAK,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;QAE9C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACtB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;KACxB,CAAA;;IAED,uBAAA,UAAU,uBAAA,CAAC,YAAY,EAAE,CAAC;;AAAA;QACtBA,GAAK,CAAC,YAAY,GAAG,EAAE,CAAC;;QAExB,KAAKC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACvCD,GAAK,CAAC,IAAI,GAAGE,MAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,YAAY,KAAK,IAAI,EAAE;gBACvB,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC3B,MAAM;gBACH,IAAI,CAAC,OAAO,EAAE,CAAC;aAClB;SACJ;;QAED,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC;KAC5B,CAAA;;IAED,uBAAA,WAAW,wBAAA,CAAC,KAAK,EAAE,IAAI,EAAE;QACrB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxB,IAAI,IAAI,EAAE;YACN,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;SAC3B,MAAM;YACH,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SACtB;KACJ,CAAA;;IAED,uBAAA,WAAW,wBAAA,CAAC,aAAa,EAAE,CAAC;;AAAA;QACxBF,GAAK,CAAC,cAAc,GAAG,EAAE,CAAC;;QAE1B,KAAKC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACzCD,GAAK,CAAC,KAAK,GAAGE,MAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,KAAK,KAAK,aAAa,EAAE;gBACzB,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC9B,MAAM;gBACH,KAAK,CAAC,OAAO,EAAE,CAAC;aACnB;SACJ;;QAED,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC;KAChC,CAAA;;IAED,uBAAA,WAAW,wBAAA,CAAC,MAAM,EAAE;QAChBF,GAAK,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC;QAC5BA,GAAK,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;QACnCA,GAAK,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,EAAE,CAAC;QACnCA,GAAK,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,IAAI,EAAE,CAAC;QACjDA,GAAK,CAAC,mBAAmB,GAAG,aAAa,CAAC,MAAM,IAAI,EAAE,CAAC;QACvDA,GAAK,CAAC,IAAI,GAAG,EAAE,CAAC;;QAEhB,KAAKC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;YAC5BD,GAAK,CAAC,aAAa,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAChCA,GAAK,CAAC,aAAa,GAAG,aAAa,CAAC,OAAO,KAAK,KAAK,CAAC;YACtD,IAAI,aAAa,CAAC,eAAe,KAAK,KAAK,EAAE;gBACzC,SAAS;aACZ;;YAEDC,GAAG,CAAC,IAAI,GAAG,aAAa,CAAC,IAAI,IAAI,EAAE,CAAC;YACpCD,GAAK,CAAC,aAAa,GAAG,aAAa,GAAG,WAAW,CAAC,MAAM,CAAC,GAAG,WAAW,CAAC,mBAAmB,CAAC,IAAI,WAAW,CAAC,MAAM,CAAC,CAAC;YACpH,IAAI,aAAa,EAAE;gBACf,IAAI,GAAG,aAAa,CAAC;oBACjB,IAAI,EAAE,IAAI;oBACV,MAAM,EAAE,aAAa;iBACxB,CAAC,CAAC;aACN;;YAEDA,GAAK,CAAC,QAAQ,GAAG,aAAa,CAAC,SAAS,CAAC;YACzCC,GAAG,CAAC,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC;YAChC,IAAI,UAAU,CAAC,KAAK,CAAC,IAAI,QAAQ,EAAE;gBAC/B,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;aAC1B;;YAEDA,GAAG,CAAC,gBAAgB,EAAE,WAAW,CAAC;YAClC,IAAI,aAAa,EAAE;gBACf,gBAAgB,GAAG,EAAE,CAAC;gBACtB,WAAW,GAAG,KAAK,CAAC;aACvB,MAAM;gBACH,gBAAgB,GAAG;oBACf,KAAK,EAAE,mBAAmB,CAAC,KAAK;oBAChC,IAAI,EAAE,mBAAmB,CAAC,IAAI;iBACjC,CAAC;gBACF,WAAW,GAAG,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC;aAC7C;;YAED,IAAI,IAAI,EAAE;gBACN,IAAI,CAAC,IAAI,CAAC;oBACN,IAAI,EAAE,IAAI;oBACV,MAAM,EAAE,gBAAgB;oBACxB,WAAW,EAAE,WAAW;oBACxB,MAAM,EAAE,aAAa;oBACrB,MAAM,EAAE,aAAa;iBACxB,CAAC,CAAC;aACN;SACJ;;QAED,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;KAC9B,CAAA;;IAED,uBAAA,SAAS,sBAAA,CAAC,KAAK,EAAE;QACbD,GAAK,CAAC,KAAK,GAAG,EAAE,CAAC;QACjBA,GAAK,CAAC,KAAK,GAAG,EAAE,CAAC;;QAEjB,KAAKC,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE,MAAM,GAAG,KAAK,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE;YAClDD,GAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;YACpC,KAAKC,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE,MAAM,GAAG,QAAQ,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE;gBACrDD,GAAK,CAAC,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;gBAC9B,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;oBACvB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACpB,MAAM;oBACH,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACpB;aACJ;SACJ;;QAED,OAAO,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;KAC3D,CAAA;;IAED,uBAAA,iBAAiB,8BAAA,GAAG,CAAC;;AAAA;QACjBA,GAAK,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC3BA,GAAK,CAAC,YAAY,GAAG,EAAE,CAAC;;QAExB,KAAKC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpCD,GAAK,CAAC,aAAa,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAChCA,GAAK,CAAC,IAAI,GAAGE,MAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;;YAEhD,IAAI,YAAY,CAAC,IAAI,CAAC,EAAE;gBACpB,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;aAC1C,MAAM;gBACH,YAAY,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,EAAE,CAAC;aAC1C;SACJ;;QAED,OAAO,YAAY,CAAC;KACvB,CAAA;;IAED,uBAAA,mBAAmB,gCAAA,CAAC,MAAM,EAAE;QACxBF,GAAK,CAAC,MAAM,GAAG,EAAE,CAAC;;QAElB,KAAKC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpCD,GAAK,CAAC,aAAa,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAChC,IAAI,aAAa,CAAC,OAAO,KAAK,KAAK,EAAE;gBACjC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;aAC9B;SACJ;;QAED,OAAO,MAAM,CAAC;KACjB,CAAA;;IAED,uBAAA,MAAM,mBAAA,CAAC,SAAS,EAAE;QACdA,GAAK,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;QACtCA,GAAK,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACzBA,GAAK,CAAC,MAAM,GAAG,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;;QAE1C,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC3C,IAAI,CAAC,WAAW,EAAE,CAAC;;QAEnB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QACvB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;KAC5B,CAAA;;IAED,uBAAA,MAAM,mBAAA,CAAC,KAAK,EAAE,CAAC;;AAAA;QACXA,GAAK,CAAC,UAAU,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACpC,IAAI,CAAC,UAAU,EAAE,CAAC;;QAElB,KAAKC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACxCC,MAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;YACrC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;SACzB;;QAED,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QACxB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5B,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;;QAE9B,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;;QAElC,KAAKD,GAAG,CAACE,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG,UAAU,CAAC,MAAM,EAAEA,GAAC,EAAE,EAAE;YACxC,UAAU,CAACA,GAAC,CAAC,CAAC,OAAO,EAAE,CAAC;SAC3B;KACJ,CAAA;;IAED,uBAAA,kBAAkB,+BAAA,CAAC,IAAI,EAAE,YAAY,EAAE;QACnCH,GAAK,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7BA,GAAK,CAAC,cAAc,GAAG,EAAE,CAAC,MAAM;YAC5B,OAAO,CAAC,kBAAkB,IAAI,OAAO,CAAC,iBAAiB;SAC1D,CAAC;QACFA,GAAK,CAAC,WAAW,GAAG,YAAY,CAAC,MAAM,GAAG,cAAc,CAAC,MAAM,CAAC;QAChEA,GAAK,CAAC,YAAY,GAAG,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;;QAE5C,KAAKC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;YAClC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SACrC;;QAED,OAAO,cAAc,CAAC;KACzB,CAAA;;IAED,uBAAA,WAAW,wBAAA,CAAC,IAAI,EAAE,UAAU,EAAE,aAAa,EAAE,mBAAmB,EAAE;QAC9DD,GAAK,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;QAC9DA,GAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;QAC9CA,GAAK,CAAC,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,IAAI,CAAC,CAAC;QACtFA,GAAK,CAAC,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;QACtDA,GAAK,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS;YAC9B,UAAU,CAAC,CAAC,GAAG,UAAU,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,QAAQ,CAAC;YAC/C,UAAU,CAAC,CAAC,GAAG,UAAU,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,QAAQ,CAAC;SAClD,CAAC;;QAEF,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,CAAC,IAAI,EAAE;YAC/B,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;SACnE;;QAED,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;KACxB,CAAA;;IAED,uBAAA,SAAS,sBAAA,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC;;AAAA;QACrBA,GAAK,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACzBA,GAAK,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACzBA,GAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACjEA,GAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACjEA,GAAK,CAAC,WAAW,GAAG,EAAE,CAAC;QACvBA,GAAK,CAAC,YAAY,GAAG,EAAE,CAAC;QACxBA,GAAK,CAAC,UAAU,GAAG,EAAE,CAAC;QACtBA,GAAK,CAAC,aAAa,GAAG,EAAE,CAAC;;QAEzB,KAAKC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnCD,GAAK,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACtBA,GAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACvBA,GAAK,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC;;;YAGvBA,GAAK,CAAC,MAAM,GAAG,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,OAAO,CAAC;YAClDC,GAAG,CAAC,eAAe,GAAG,gBAAgB,CAAC;;YAEvC,IAAI,MAAM,KAAK,OAAO,EAAE;gBACpB,eAAe,GAAGC,MAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;aAC5D;;YAEDA,MAAI,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,EAAE,gBAAgB,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;;YAExE,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;gBACvB,SAAS;aACZ;;YAED,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,KAAK,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE;;gBAEzD,IAAI,WAAW,CAAC,MAAM,CAAC,EAAE;oBACrB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG;yBACf,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC;yBACtC,SAAS,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;qBACtC,CAAC;iBACL;;gBAED,WAAW,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;aAC9B;;YAED,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,KAAK,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE;;gBAEzD,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;oBACjB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC;oBACzD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;iBACzB;gBACDA,MAAI,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,EAAE,gBAAgB,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;;;gBAGxE,IAAI,YAAY,CAAC,MAAM,CAAC,EAAE;oBACtB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG;yBACf,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC;yBACxC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;qBACrC,CAAC;iBACL;;gBAED,YAAY,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;aAC/B;;YAED,IAAI,CAAC,KAAK,CAAC,IAAI,OAAO,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,EAAE;gBACvC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;gBACtB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACzB;SACJ;;QAED,KAAKD,GAAG,CAACE,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG,KAAK,CAAC,MAAM,EAAEA,GAAC,EAAE,EAAE;YACnCH,GAAK,CAACI,MAAI,GAAG,KAAK,CAACD,GAAC,CAAC,CAAC;YACtBH,GAAK,CAACK,MAAI,GAAGD,MAAI,CAAC,IAAI,CAAC;YACvBJ,GAAK,CAACM,QAAM,GAAGD,MAAI,CAAC,EAAE,CAAC;;;YAGvBL,GAAK,CAACO,QAAM,GAAG,UAAU,CAAC,KAAK,EAAEF,MAAI,CAAC,IAAI,OAAO,CAAC;YAClDJ,GAAG,CAACO,iBAAe,GAAG,gBAAgB,CAAC;YACvC,IAAID,QAAM,KAAK,OAAO,EAAE;gBACpBC,iBAAe,GAAGN,MAAI,CAAC,kBAAkB,CAACK,QAAM,EAAE,KAAK,CAAC,CAAC;aAC5D;;YAEDL,MAAI,CAAC,WAAW,CAACE,MAAI,EAAEG,QAAM,EAAE,gBAAgB,CAACJ,GAAC,CAAC,EAAEK,iBAAe,CAACL,GAAC,CAAC,CAAC,CAAC;;YAExE,IAAIC,MAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;gBACvB,SAAS;aACZ;;YAED,IAAI,KAAK,CAACA,MAAI,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,KAAK,KAAK,CAACG,QAAM,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE;;gBAEzD,IAAI,CAACH,MAAI,CAAC,SAAS,EAAE;oBACjBA,MAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,GAAG,CAACA,MAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC;oBACzDA,MAAI,CAAC,SAAS,GAAG,IAAI,CAAC;iBACzB;gBACDF,MAAI,CAAC,WAAW,CAACE,MAAI,EAAEG,QAAM,EAAE,gBAAgB,CAACJ,GAAC,CAAC,EAAEK,iBAAe,CAACL,GAAC,CAAC,CAAC,CAAC;;;gBAGxE,IAAI,UAAU,CAACG,QAAM,CAAC,EAAE;oBACpBF,MAAI,CAAC,MAAM,CAACA,MAAI,CAAC,GAAG;yBACf,OAAO,CAAC,UAAU,CAACE,QAAM,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC;yBACpC,SAAS,CAAC,CAAC,EAAE,CAACF,MAAI,CAAC,OAAO,CAAC,MAAM,CAAC;qBACtC,CAAC;iBACL;;gBAED,UAAU,CAACE,QAAM,CAAC,GAAGF,MAAI,CAAC;aAC7B;;YAED,IAAI,KAAK,CAACA,MAAI,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE,eAAe,CAAC,KAAK,KAAK,CAACG,QAAM,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE,eAAe,CAAC,EAAE;;gBAE3F,IAAI,aAAa,CAACD,QAAM,CAAC,EAAE;oBACvBF,MAAI,CAAC,MAAM,CAACA,MAAI,CAAC,GAAG;yBACf,OAAO,CAAC,aAAa,CAACE,QAAM,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC;yBAC1C,SAAS,CAAC,CAAC,EAAEF,MAAI,CAAC,OAAO,CAAC,MAAM,CAAC;qBACrC,CAAC;iBACL;;gBAED,aAAa,CAACE,QAAM,CAAC,GAAGF,MAAI,CAAC;aAChC;;YAED,IAAID,GAAC,KAAK,CAAC,EAAE;gBACTC,MAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;gBACtBA,MAAI,CAAC,MAAM,CAACA,MAAI,CAAC,GAAG,CAAC,CAAC;aACzB;SACJ;KACJ,CAAA;;IAED,uBAAA,eAAe,4BAAA,CAAC,KAAK,EAAE;QACnBJ,GAAK,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC;QACvCA,GAAK,CAAC,OAAO,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;QACnCC,GAAG,CAAC,SAAS,GAAG,CAAC,CAAC;;QAElB,KAAKA,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnCD,GAAK,CAAC,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;;YAE7B,IAAI,WAAW,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC7B,SAAS,GAAG,IAAI,CAAC,GAAG;oBAChB,SAAS;oBACT,OAAO,CAAC,KAAK,EAAE,GAAG,WAAW,CAAC,UAAU,CAAC,KAAK,EAAE;iBACnD,CAAC;aACL;SACJ;;QAED,IAAI,SAAS,KAAK,CAAC,EAAE;YACjB,KAAKC,GAAG,CAACE,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG,IAAI,CAAC,MAAM,EAAEA,GAAC,EAAE,EAAE;gBAClCH,GAAK,CAAC,WAAW,GAAG,IAAI,CAACG,GAAC,CAAC,CAAC;;gBAE5B,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,EAAE;oBAC/B,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;iBAC5D;aACJ;SACJ;KACJ,CAAA;;IAED,uBAAA,gBAAgB,6BAAA,CAAC,KAAK,EAAE;QACpBF,GAAG,CAAC,QAAQ,CAAC;;QAEb,KAAKA,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnCD,GAAK,CAAC,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7BA,GAAK,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;YAC9BA,GAAK,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,GAAG,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC;;YAE7F,IAAI,SAAS,KAAK,CAAC,EAAE;gBACjB,KAAKC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAClCD,GAAK,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;;oBAE5B,IAAI,WAAW,CAAC,OAAO,CAAC,QAAQ,EAAE;wBAC9B,WAAW,CAAC,MAAM;4BACd,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,SAAS,CAAC;yBACvC,CAAC;qBACL;iBACJ;gBACD,QAAQ,GAAG,IAAI,CAAC;aACnB;SACJ;;QAED,OAAO,QAAQ,CAAC;KACnB,CAAA;;IAED,uBAAA,OAAO,oBAAA,CAAC,KAAK,EAAE;QACXA,GAAK,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC;QACvCC,GAAG,CAAC,OAAO,GAAG,CAAC,CAAC;;QAEhB,KAAKA,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnCD,GAAK,CAAC,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7BA,GAAK,CAAC,QAAQ,GAAG,WAAW,CAAC,IAAI,CAAC;YAClCA,GAAK,CAAC,OAAO,GAAG,WAAW,CAAC,UAAU,CAAC;;YAEvC,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;gBACrBA,GAAK,CAAC,OAAO,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;;gBAEvCA,GAAK,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,GAAG,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC;;;gBAG3E,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC;;;gBAGrD,KAAKC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACtCD,GAAK,CAAC,WAAW,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;;oBAEhC,WAAW,CAAC,MAAM;wBACd,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,OAAO,CAAC;qBACxC,CAAC;iBACL;aACJ;SACJ;;QAED,KAAKC,GAAG,CAACE,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG,IAAI,CAAC,MAAM,EAAEA,GAAC,EAAE,EAAE;YAClCH,GAAK,CAACS,aAAW,GAAG,IAAI,CAACN,GAAC,CAAC,CAAC;;YAE5BM,aAAW,CAAC,MAAM;gBACdA,aAAW,CAAC,GAAG,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC;aACxC,CAAC;SACL;KACJ,CAAA;;IAED,uBAAA,UAAU,uBAAA,CAAC,KAAK,EAAE,CAAC;;AAAA;QACfT,GAAK,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;;QAEnC,KAAKC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnCC,MAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SACjC;;QAED,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YACxC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;YAC/B,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;;YAE5B,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;;YAEhC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;YAC/B,IAAI,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE;gBAC7B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;aAClC;;YAED,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;YAC7B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;;YAE/B,IAAI,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,EAAE;gBAC9B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;aAClC;;YAED,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SACvB;KACJ,CAAA;;IAED,uBAAA,oBAAoB,iCAAA,CAAC,WAAW,EAAE,CAAC;;AAAA;QAC/B,AAAK,AAAgB,OAAA,GAAG,IAAI;QAApB,IAAA,IAAI;QAAE,IAAA,KAAK,aAAb,AAAM,AAAO,AAAS,AAAC;QAC7BD,GAAG,CAAC,OAAO,CAAC;;QAEZ,KAAKA,GAAG,CAAC,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;YACxCD,GAAK,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;YACvB,IAAI,IAAI,CAAC,gBAAgB,EAAE,EAAE;gBACzB,OAAO,GAAG,IAAI,CAAC;aAClB;SACJ;;QAED,IAAI,OAAO,EAAE;YACT,KAAKC,GAAG,CAACS,KAAG,GAAG,CAAC,EAAEA,KAAG,GAAG,KAAK,CAAC,MAAM,EAAEA,KAAG,EAAE,EAAE;gBACzCR,MAAI,CAAC,cAAc,CAAC,KAAK,CAACQ,KAAG,CAAC,CAAC,CAAC;aACnC;;YAED,IAAI,WAAW,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;gBACtD,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;gBAC7C,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;aAC/B;SACJ;KACJ,CAAA;;IAED,uBAAA,cAAc,2BAAA,CAAC,IAAI,EAAE;QACjBV,GAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACvBA,GAAK,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;;QAE3B,IAAI,MAAM,GAAG,CAAC,EAAE;YACZ,KAAKC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC7B,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aACnC;SACJ;KACJ,CAAA;;IAED,uBAAA,YAAY,yBAAA,CAAC,KAAK,EAAE;QAChBD,GAAK,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC3BA,GAAK,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC;QAC5BA,GAAK,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;;QAErB,KAAKC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;YAC5BD,GAAK,CAAC,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YACjC,IAAI,CAAC,SAAS,IAAI,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE;gBACzC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACzB;SACJ;KACJ,CAAA;;IAED,uBAAA,WAAW,wBAAA,GAAG;QACV,AAAK,AAAe,OAAA,GAAG,IAAI;QAAnB,IAAA,GAAG;QAAE,IAAA,KAAK,aAAZ,AAAK,AAAO,AAAS,AAAC;QAC5BA,GAAK,CAAC,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC;QACjCC,GAAG,CAAC,eAAe,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC;QACnCA,GAAG,CAAC,cAAc,GAAG,WAAW,CAAC;QACjCA,GAAG,CAAC,eAAe,GAAG,CAAC,CAAC;QACxBA,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC;;QAEjB,KAAKA,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;YAClCD,GAAK,CAAC,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7BA,GAAK,CAAC,MAAM,GAAG,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC;;YAE1C,WAAW,CAAC,OAAO,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,EAAE,CAAC;;YAExC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE;gBAC7B,eAAe,EAAE,CAAC;aACrB,MAAM;gBACH,IAAI,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;oBACvCA,GAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC;oBAC5C,WAAW,CAAC,OAAO,CAAC,MAAM,GAAG,QAAQ,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC;iBACxD;;gBAED,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;;gBAEhC,eAAe,IAAI,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC;aACjD;SACJ;;QAED,KAAKC,GAAG,CAACE,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG,WAAW,EAAEA,GAAC,EAAE,EAAE;YAClCH,GAAK,CAACW,aAAW,GAAG,KAAK,CAACR,GAAC,CAAC,CAAC;;YAE7B,IAAI,CAACQ,aAAW,CAAC,OAAO,CAAC,MAAM,EAAE;gBAC7BA,aAAW,CAAC,OAAO,CAAC,MAAM,GAAG,eAAe,GAAG,eAAe,CAAC;aAClE;SACJ;;QAED,KAAKV,GAAG,CAACE,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG,WAAW,EAAEA,GAAC,EAAE,EAAE;YAClCH,GAAK,CAACW,aAAW,GAAG,KAAK,CAACR,GAAC,CAAC,CAAC;YAC7BH,GAAK,CAAC,OAAO,GAAG,GAAG;iBACd,KAAK,EAAE;iBACP,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;;YAEvBW,aAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;;YAE5B,cAAc,EAAE,CAAC;YACjB,GAAG,IAAIA,aAAW,CAAC,OAAO,CAAC,MAAM,CAAC;SACrC;KACJ,CAAA;;IAED,uBAAA,aAAa,0BAAA,GAAG;QACZX,GAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACvBA,GAAK,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC;QAC9BC,GAAG,CAAC,GAAG,CAAC;;QAER,KAAKA,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;YAChCD,GAAK,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;;YAEtB,KAAKC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;gBAChCD,GAAK,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;;gBAEtB,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,KAAK,KAAK,CAAC,OAAO,CAAC,QAAQ,EAAE;oBACnDA,GAAK,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;;oBAE9D,IAAI,CAAC,GAAG,EAAE;wBACN,GAAG,GAAG,OAAO,CAAC;qBACjB,MAAM;wBACH,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;qBAC3B;iBACJ;aACJ;SACJ;;QAED,OAAO,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC;KAC1B,CAAA;;IAED,uBAAA,WAAW,wBAAA,GAAG;QACVA,GAAK,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACzBA,GAAK,CAAC,KAAK,GAAG,EAAE,CAAC;;QAEjB,KAAKC,GAAG,CAAC,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,KAAK,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;YACzC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC;SACtC;;QAED,OAAO,KAAK,CAAC;KAChB,CAAA;;IAED,uBAAA,kBAAkB,+BAAA,CAAC,SAAS,EAAE;QAC1BD,GAAK,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QACjC,KAAKC,GAAG,CAAC,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,KAAK,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;YACzC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;SACjE;KACJ,CAAA;;IAED,uBAAA,uBAAuB,oCAAA,CAAC,KAAK,EAAE;QAC3BD,GAAK,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QACjC,KAAKC,GAAG,CAAC,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,KAAK,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;YACzC,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;gBACjC,OAAO,IAAI,CAAC;aACf;SACJ;KACJ,CAAA;;IAED,uBAAA,YAAY,yBAAA,GAAG;QACXF,sBAAK,CAAC,YAAY,KAAA,CAAC,IAAA,CAAC,CAAC;;QAErBC,GAAK,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;QACtC,AAAG,AAAG,IAAA,OAAO;QAAE,IAAA,UAAU;QAAW,+DAAA,EAAE,CAAlC,AAAS,AAAY,AAAa,AAAE,AAAU,AAAC;QACnD,IAAI,aAAa,CAAC,UAAU,CAAC,EAAE;YAC3B,UAAU,GAAG,KAAK,CAAC;YACnB,OAAO,GAAG,CAAC,CAAC;SACf;;QAEDA,GAAK,CAAC,EAAE,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC;YAC3C,IAAI,EAAE;gBACF,KAAK,EAAE,UAAU;gBACjB,OAAO,EAAE,OAAO;aACnB;YACD,MAAM,EAAE;gBACJ,KAAK,EAAE,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,GAAG,EAAE;gBACvC,KAAK,EAAE,MAAM,CAAC,KAAK;gBACnB,QAAQ,EAAE,MAAM,CAAC,QAAQ;aAC5B;YACD,MAAM,EAAE,CAAC,CAAC;SACb,CAAC,CAAC;;QAEH,IAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC;;QAE5B,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;KACzB,CAAA;;IAED,uBAAA,qBAAqB,kCAAA,CAAC,aAAa,EAAE;QACjCA,GAAK,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC3BA,GAAK,CAAC,MAAM,GAAG,EAAE,CAAC;;QAElB,IAAI,aAAa,KAAK,IAAI,EAAE;YACxB,KAAKC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACpCD,GAAK,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;gBACxB,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,YAAY,EAAE;oBAC1C,SAAS;iBACZ;;gBAEDA,GAAK,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;gBACvD,IAAI,MAAM,IAAI,MAAM,CAAC,MAAM,EAAE;oBACzB,KAAKC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBACpCD,GAAK,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;wBACxB,IAAI,KAAK,IAAI,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,KAAK,KAAK,IAAI,EAAE;4BACvD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;yBACtB;qBACJ;iBACJ;aACJ;SACJ;;QAED,OAAO,MAAM,CAAC;KACjB,CAAA;;IAED,uBAAA,mBAAmB,gCAAA,CAAC,WAAW,EAAE;QAC7B,OAAO,IAAI,CAAC,YAAY,CAAC,SAAS,KAAK,EAAE;YACrC,OAAO,KAAK,CAAC,MAAM,CAAC,KAAK,KAAK,WAAW,CAAC;SAC7C,CAAC,CAAC;KACN,CAAA;;IAED,uBAAA,kBAAkB,+BAAA,CAAC,IAAI,EAAE;QACrB,OAAO,IAAI,CAAC,YAAY,CAAC,SAAS,KAAK,EAAE;YACrC,OAAO,KAAK,CAAC,MAAM,CAAC,IAAI,KAAK,IAAI,CAAC;SACrC,CAAC,CAAC;KACN,CAAA;;IAED,uBAAA,YAAY,yBAAA,CAAC,QAAQ,EAAE;QACnBA,GAAK,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC3BA,GAAK,CAAC,MAAM,GAAG,EAAE,CAAC;;QAElB,KAAKC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpCD,GAAK,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACxBA,GAAK,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;YAC5B,KAAKC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACpCD,GAAK,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;gBACxB,IAAI,KAAK,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;oBAC1B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBACtB;aACJ;SACJ;;QAED,OAAO,MAAM,CAAC;KACjB,CAAA;;IAED,uBAAA,SAAS,sBAAA,CAAC,QAAQ,EAAE;QAChBA,GAAK,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;;QAE3B,KAAKC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpCD,GAAK,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACxBA,GAAK,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;YAC5B,KAAKC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACpCD,GAAK,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;gBACxB,IAAI,KAAK,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;oBAC1B,OAAO,KAAK,CAAC;iBAChB;aACJ;SACJ;KACJ,CAAA;;IAED,uBAAA,WAAW,wBAAA,CAAC,KAAK,EAAE;QACfA,GAAK,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;;QAEzB,KAAKC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnCD,GAAK,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,IAAI,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;gBAC/B,OAAO,IAAI,CAAC;aACf;SACJ;KACJ,CAAA,AACJ;;;EAr0B0B,YAq0B1B,GAAA;;AAED,SAAS,YAAY,CAAC,IAAI,EAAE;IACxBA,GAAK,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IAC3BC,GAAG,CAAC,GAAG,CAAC;;IAER,IAAI,MAAM,GAAG,CAAC,EAAE;QACZ,KAAKA,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;YAC7BD,GAAK,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;;YAErC,IAAI,CAAC,GAAG,EAAE;gBACN,GAAG,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC;aACzB,MAAM;gBACH,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACrB;SACJ;KACJ;;IAED,OAAO,GAAG,IAAI,IAAI,GAAG,EAAE,CAAC;CAC3B;;AAED,SAAS,UAAU,CAAC,IAAI,EAAE,IAAI,EAAE;IAC5B,KAAKC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAClCD,GAAK,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACvB,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,IAAI,EAAE;YAChC,OAAO,MAAM,CAAC;SACjB;KACJ;CACJ;;AAED,SAAS,aAAa,CAAC,KAAK,EAAE;IAC1B,OAAO,KAAK,KAAK,EAAE,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,MAAM,IAAI,KAAK,KAAK,aAAa,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;CAC3G;;;AAGD,iBAAiB,CAAC,YAAY,EAAE;IAC5B,MAAM,EAAE,EAAE;IACV,QAAQ,EAAE;QACN,MAAM,EAAE,EAAE;KACb;IACD,UAAU,EAAE,EAAE;IACd,MAAM,EAAE;QACJ,KAAK,EAAE,KAAK;QACZ,KAAK,EAAE,CAAC;KACX;IACD,MAAM,EAAE;QACJ,aAAa,EAAE;YACX,MAAM,EAAE;gBACJ,KAAK,EAAE,SAAS;aACnB;YACD,OAAO,EAAE;gBACL,KAAK,EAAE,SAAS;aACnB;SACJ;KACJ;CACJ,CAAC,CAAC;;AAEH,eAAe,YAAY"}