{"version":3,"file":"categorical-plotarea.js","sources":["categorical-plotarea.js"],"sourcesContent":["import PlotAreaBase from './plotarea-base';\nimport AxisGroupRangeTracker from '../axis-group-range-tracker';\nimport PlotAreaEventsMixin from '../mixins/plotarea-events-mixin';\nimport SeriesAggregator from '../aggregates/series-aggregator';\nimport DefaultAggregates from '../aggregates/default-aggregates';\nimport SeriesBinder from '../series-binder';\nimport BarChart from '../bar-chart/bar-chart';\nimport RangeBarChart from '../range-bar-chart/range-bar-chart';\nimport BulletChart from '../bullet-chart/bullet-chart';\nimport LineChart from '../line-chart/line-chart';\nimport AreaChart from '../area-chart/area-chart';\nimport OHLCChart from '../ohlc-chart/ohlc-chart';\nimport CandlestickChart from '../candlestick-chart/candlestick-chart';\nimport BoxPlotChart from '../box-plot-chart/box-plot-chart';\nimport WaterfallChart from '../waterfall-chart/waterfall-chart';\n\nimport { CategoryAxis, DateCategoryAxis, NumericAxis, LogarithmicAxis, Point } from '../../core';\n\nimport filterSeriesByType from '../utils/filter-series-by-type';\nimport equalsIgnoreCase from '../utils/equals-ignore-case';\nimport categoriesCount from '../utils/categories-count';\nimport getField from '../utils/get-field';\nimport isDateAxis from '../utils/is-date-axis';\nimport appendIfNotNull from '../utils/append-if-not-null';\nimport singleItemOrArray from '../utils/single-item-or-array';\nimport getDateField from '../utils/get-date-field';\n\nimport { BAR, COLUMN, BULLET, VERTICAL_BULLET, LINE, VERTICAL_LINE, AREA, VERTICAL_AREA,\n    RANGE_COLUMN, RANGE_BAR, WATERFALL, HORIZONTAL_WATERFALL, BOX_PLOT, VERTICAL_BOX_PLOT,\n    OHLC, CANDLESTICK, LOGARITHMIC, STEP, EQUALLY_SPACED_SERIES } from '../constants';\n\nimport { DATE, MIN_VALUE, MAX_VALUE } from '../../common/constants';\nimport { setDefaultOptions, inArray, isNumber, deepExtend, defined, eventElement, grep } from '../../common';\n\nclass CategoricalPlotArea extends PlotAreaBase {\n    initFields(series) {\n        this.namedCategoryAxes = {};\n        this.namedValueAxes = {};\n        this.valueAxisRangeTracker = new AxisGroupRangeTracker();\n\n        if (series.length > 0) {\n            this.invertAxes = inArray(\n                series[0].type, [ BAR, BULLET, VERTICAL_LINE, VERTICAL_AREA,\n                                 RANGE_BAR, HORIZONTAL_WATERFALL, VERTICAL_BOX_PLOT ]\n            );\n\n            for (let i = 0; i < series.length; i++) {\n                const stack = series[i].stack;\n                if (stack && stack.type === \"100%\") {\n                    this.stack100 = true;\n                    break;\n                }\n            }\n        }\n\n    }\n\n    render(panes = this.panes) {\n        this.createCategoryAxes(panes);\n        this.aggregateCategories(panes);\n        this.createCategoryAxesLabels(panes);\n        this.createCharts(panes);\n        this.createValueAxes(panes);\n    }\n\n    removeAxis(axis) {\n        const axisName = axis.options.name;\n\n        super.removeAxis(axis);\n\n        if (axis instanceof CategoryAxis) {\n            delete this.namedCategoryAxes[axisName];\n        } else {\n            this.valueAxisRangeTracker.reset(axisName);\n            delete this.namedValueAxes[axisName];\n        }\n\n        if (axis === this.categoryAxis) {\n            delete this.categoryAxis;\n        }\n\n        if (axis === this.valueAxis) {\n            delete this.valueAxis;\n        }\n    }\n\n    createCharts(panes) {\n        const seriesByPane = this.groupSeriesByPane();\n\n        for (let i = 0; i < panes.length; i++) {\n            const pane = panes[i];\n            const paneSeries = seriesByPane[pane.options.name || \"default\"] || [];\n            this.addToLegend(paneSeries);\n\n            const visibleSeries = this.filterVisibleSeries(paneSeries);\n            if (!visibleSeries) {\n                continue;\n            }\n\n            const groups = this.groupSeriesByCategoryAxis(visibleSeries);\n            for (let groupIx = 0; groupIx < groups.length; groupIx++) {\n                this.createChartGroup(groups[groupIx], pane);\n            }\n        }\n    }\n\n    createChartGroup(series, pane) {\n        this.createAreaChart(\n            filterSeriesByType(series, [ AREA, VERTICAL_AREA ]), pane\n        );\n\n        this.createBarChart(\n            filterSeriesByType(series, [ COLUMN, BAR ]), pane\n        );\n\n        this.createRangeBarChart(\n            filterSeriesByType(series, [ RANGE_COLUMN, RANGE_BAR ]), pane\n        );\n\n        this.createBulletChart(\n            filterSeriesByType(series, [ BULLET, VERTICAL_BULLET ]), pane\n        );\n\n        this.createCandlestickChart(\n            filterSeriesByType(series, CANDLESTICK), pane\n        );\n\n        this.createBoxPlotChart(\n            filterSeriesByType(series, [ BOX_PLOT, VERTICAL_BOX_PLOT ]), pane\n        );\n\n        this.createOHLCChart(\n            filterSeriesByType(series, OHLC), pane\n        );\n\n        this.createWaterfallChart(\n            filterSeriesByType(series, [ WATERFALL, HORIZONTAL_WATERFALL ]), pane\n        );\n\n        this.createLineChart(\n            filterSeriesByType(series, [ LINE, VERTICAL_LINE ]), pane\n        );\n    }\n\n    aggregateCategories(panes) {\n        const series = this.srcSeries || this.series;\n        const processedSeries = [];\n\n        for (let i = 0; i < series.length; i++) {\n            let currentSeries = series[i];\n            const categoryAxis = this.seriesCategoryAxis(currentSeries);\n            const axisPane = this.findPane(categoryAxis.options.pane);\n            const dateAxis = equalsIgnoreCase(categoryAxis.options.type, DATE);\n\n            if ((dateAxis || currentSeries.categoryField) && inArray(axisPane, panes)) {\n                currentSeries = this.aggregateSeries(currentSeries, categoryAxis);\n            } else if (isNumber(categoryAxis.options.min) || isNumber(categoryAxis.options.max)) {\n                currentSeries = this.filterSeries(currentSeries, categoryAxis);\n            }\n\n            processedSeries.push(currentSeries);\n        }\n\n        this.srcSeries = series;\n        this.series = processedSeries;\n    }\n\n    filterSeries(series, categoryAxis) {\n        const range = categoryAxis.totalRangeIndices();\n        const justified = categoryAxis.options.justified;\n        const outOfRangePoints = inArray(series.type, [ LINE, VERTICAL_LINE, AREA, VERTICAL_AREA ]);\n\n        range.min = isNumber(categoryAxis.options.min) ? Math.floor(range.min) : 0;\n        if (isNumber(categoryAxis.options.max)) {\n            range.max = justified ? Math.floor(range.max) + 1 : Math.ceil(range.max);\n        } else {\n            range.max = series.data.length;\n        }\n\n        const currentSeries = deepExtend({}, series);\n\n        if (outOfRangePoints) {\n            const minCategory = range.min - 1;\n            const srcCategories = categoryAxis.options.srcCategories || [];\n            if (minCategory >= 0 && minCategory < currentSeries.data.length) {\n                currentSeries._outOfRangeMinPoint = {\n                    item: currentSeries.data[minCategory],\n                    category: srcCategories[minCategory],\n                    categoryIx: -1\n                };\n            }\n\n            if (range.max < currentSeries.data.length) {\n                currentSeries._outOfRangeMaxPoint = {\n                    item: currentSeries.data[range.max],\n                    category: srcCategories[range.max],\n                    categoryIx: range.max - range.min\n                };\n            }\n        }\n\n        categoryAxis._seriesMax = Math.max(categoryAxis._seriesMax || 0, currentSeries.data.length);\n\n        currentSeries.data = (currentSeries.data || []).slice(range.min, range.max);\n\n        return currentSeries;\n    }\n\n    aggregateSeries(series, categoryAxis) {\n        const outOfRangePoints = inArray(series.type, [ LINE, VERTICAL_LINE, AREA, VERTICAL_AREA ]);\n        const { categories, srcCategories = categories, dataItems = [] } = categoryAxis.options;\n        const dateAxis = equalsIgnoreCase(categoryAxis.options.type, DATE);\n        const aggregatorSeries = deepExtend({}, series);\n        const result = deepExtend({}, series);\n        const srcData = series.data;\n        const srcPoints = [];\n        let outOfRangeMinIdx = MIN_VALUE;\n        let outOfRangeMaxIdx = MAX_VALUE;\n        let getFn = getField;\n        let outOfRangeMinCategory, outOfRangeMaxCategory;\n\n        if (dateAxis) {\n            getFn = getDateField;\n        }\n\n        for (let i = 0; i < srcData.length; i++) {\n            let category;\n            if (series.categoryField) {\n                category = getFn(series.categoryField, srcData[i], this.chartService.intl);\n            } else {\n                category = srcCategories[i];\n            }\n\n            if (defined(category)) {\n                const categoryIx = categoryAxis.categoryIndex(category);\n                if (0 <= categoryIx && categoryIx < categories.length) {\n                    srcPoints[categoryIx] = srcPoints[categoryIx] || [];\n                    srcPoints[categoryIx].push(i);\n                } else if (outOfRangePoints) {\n                    if (categoryIx < 0) {\n                        if (categoryIx === outOfRangeMinIdx) {\n                            outOfRangeMinCategory.points.push(i);\n                        } else if (categoryIx > outOfRangeMinIdx) {\n                            outOfRangeMinIdx = categoryIx;\n                            outOfRangeMinCategory = {\n                                category: category,\n                                points: [ i ]\n                            };\n                        }\n                    } else if (categoryIx >= categories.length) {\n                        if (categoryIx === outOfRangeMaxIdx) {\n                            outOfRangeMaxCategory.points.push(i);\n                        } else if (categoryIx < outOfRangeMaxIdx) {\n                            outOfRangeMaxIdx = categoryIx;\n                            outOfRangeMaxCategory = {\n                                category: category,\n                                points: [ i ]\n                            };\n                        }\n                    }\n                }\n            }\n        }\n\n        const aggregator = new SeriesAggregator(aggregatorSeries, SeriesBinder.current, DefaultAggregates.current);\n        const data = result.data = [];\n        for (let i = 0; i < categories.length; i++) {\n            data[i] = aggregator.aggregatePoints(\n                srcPoints[i], categories[i]\n            );\n            if (srcPoints[i]) {\n                dataItems[i] = data[i];\n            }\n        }\n\n        if (outOfRangeMinCategory && data.length) {\n            result._outOfRangeMinPoint = {\n                item: aggregator.aggregatePoints(\n                    outOfRangeMinCategory.points, outOfRangeMinCategory.category\n                ),\n                categoryIx: outOfRangeMinIdx,\n                category: outOfRangeMinCategory.category\n            };\n        }\n\n        if (outOfRangeMaxCategory && data.length) {\n            result._outOfRangeMaxPoint = {\n                item: aggregator.aggregatePoints(\n                    outOfRangeMaxCategory.points, outOfRangeMaxCategory.category\n                ),\n                categoryIx: outOfRangeMaxIdx,\n                category: outOfRangeMaxCategory.category\n            };\n        }\n        categoryAxis.options.dataItems = dataItems;\n\n        return result;\n    }\n\n    appendChart(chart, pane) {\n        const series = chart.options.series;\n        const categoryAxis = this.seriesCategoryAxis(series[0]);\n        const categories = categoryAxis.options.categories;\n        let categoriesToAdd = Math.max(0, categoriesCount(series) - categories.length);\n\n        while (categoriesToAdd--) {\n            categories.push(\"\");\n        }\n\n        this.valueAxisRangeTracker.update(chart.valueAxisRanges);\n\n        super.appendChart(chart, pane);\n    }\n\n    // TODO: Refactor, optionally use series.pane option\n    seriesPaneName(series) {\n        const options = this.options;\n        const axisName = series.axis;\n        const axisOptions = [].concat(options.valueAxis);\n        const axis = grep(axisOptions, function(a) { return a.name === axisName; })[0];\n        const panes = options.panes || [ {} ];\n        const defaultPaneName = (panes[0] || {}).name || \"default\";\n        const paneName = (axis || {}).pane || defaultPaneName;\n\n        return paneName;\n    }\n\n    seriesCategoryAxis(series) {\n        const axisName = series.categoryAxis;\n        const axis = axisName ? this.namedCategoryAxes[axisName] : this.categoryAxis;\n\n        if (!axis) {\n            throw new Error(\"Unable to locate category axis with name \" + axisName);\n        }\n\n        return axis;\n    }\n\n    stackableChartOptions(firstSeries, pane) {\n        const stack = firstSeries.stack;\n        const isStacked100 = stack && stack.type === \"100%\";\n        const clip = pane.options.clip;\n\n        return {\n            isStacked: stack,\n            isStacked100: isStacked100,\n            clip: clip\n        };\n    }\n\n    groupSeriesByCategoryAxis(series) {\n        const categoryAxes = [];\n        const unique = {};\n        for (let idx = 0; idx < series.length; idx++) {\n            const name = series[idx].categoryAxis || \"$$default$$\";\n            if (!unique.hasOwnProperty(name)) {\n                unique[name] = true;\n                categoryAxes.push(name);\n            }\n        }\n\n        const groups = [];\n        for (let axisIx = 0; axisIx < categoryAxes.length; axisIx++) {\n            const axis = categoryAxes[axisIx];\n            const axisSeries = groupSeries(series, axis, axisIx);\n            if (axisSeries.length === 0) {\n                continue;\n            }\n\n            groups.push(axisSeries);\n        }\n\n        return groups;\n    }\n\n    createBarChart(series, pane) {\n        if (series.length === 0) {\n            return;\n        }\n\n        const firstSeries = series[0];\n        const barChart = new BarChart(this, Object.assign({\n            series: series,\n            invertAxes: this.invertAxes,\n            gap: firstSeries.gap,\n            spacing: firstSeries.spacing\n        }, this.stackableChartOptions(firstSeries, pane)));\n\n        this.appendChart(barChart, pane);\n    }\n\n    createRangeBarChart(series, pane) {\n        if (series.length === 0) {\n            return;\n        }\n\n        const firstSeries = series[0];\n        const rangeColumnChart = new RangeBarChart(this, {\n            series: series,\n            invertAxes: this.invertAxes,\n            gap: firstSeries.gap,\n            spacing: firstSeries.spacing\n        });\n\n        this.appendChart(rangeColumnChart, pane);\n    }\n\n    createBulletChart(series, pane) {\n        if (series.length === 0) {\n            return;\n        }\n\n        const firstSeries = series[0];\n        const bulletChart = new BulletChart(this, {\n            series: series,\n            invertAxes: this.invertAxes,\n            gap: firstSeries.gap,\n            spacing: firstSeries.spacing,\n            clip: pane.options.clip\n        });\n\n        this.appendChart(bulletChart, pane);\n    }\n\n    createLineChart(series, pane) {\n        if (series.length === 0) {\n            return;\n        }\n\n        const firstSeries = series[0];\n        const lineChart = new LineChart(this, Object.assign({\n            invertAxes: this.invertAxes,\n            series: series\n        }, this.stackableChartOptions(firstSeries, pane)));\n\n        this.appendChart(lineChart, pane);\n    }\n\n    createAreaChart(series, pane) {\n        if (series.length === 0) {\n            return;\n        }\n\n        const firstSeries = series[0];\n        const areaChart = new AreaChart(this, Object.assign({\n            invertAxes: this.invertAxes,\n            series: series\n        }, this.stackableChartOptions(firstSeries, pane)));\n\n        this.appendChart(areaChart, pane);\n    }\n\n    createOHLCChart(series, pane) {\n        if (series.length === 0) {\n            return;\n        }\n\n        const firstSeries = series[0];\n        const chart = new OHLCChart(this, {\n            invertAxes: this.invertAxes,\n            gap: firstSeries.gap,\n            series: series,\n            spacing: firstSeries.spacing,\n            clip: pane.options.clip\n        });\n\n        this.appendChart(chart, pane);\n    }\n\n    createCandlestickChart(series, pane) {\n        if (series.length === 0) {\n            return;\n        }\n\n        const firstSeries = series[0];\n        const chart = new CandlestickChart(this, {\n            invertAxes: this.invertAxes,\n            gap: firstSeries.gap,\n            series: series,\n            spacing: firstSeries.spacing,\n            clip: pane.options.clip\n        });\n\n        this.appendChart(chart, pane);\n    }\n\n    createBoxPlotChart(series, pane) {\n        if (series.length === 0) {\n            return;\n        }\n\n        const firstSeries = series[0];\n        const chart = new BoxPlotChart(this, {\n            invertAxes: this.invertAxes,\n            gap: firstSeries.gap,\n            series: series,\n            spacing: firstSeries.spacing,\n            clip: pane.options.clip\n        });\n\n        this.appendChart(chart, pane);\n    }\n\n    createWaterfallChart(series, pane) {\n        if (series.length === 0) {\n            return;\n        }\n\n        const firstSeries = series[0];\n        const waterfallChart = new WaterfallChart(this, {\n            series: series,\n            invertAxes: this.invertAxes,\n            gap: firstSeries.gap,\n            spacing: firstSeries.spacing\n        });\n\n        this.appendChart(waterfallChart, pane);\n    }\n\n    axisRequiresRounding(categoryAxisName, categoryAxisIndex) {\n        const centeredSeries = filterSeriesByType(this.series, EQUALLY_SPACED_SERIES);\n\n        for (let seriesIx = 0; seriesIx < this.series.length; seriesIx++) {\n            const currentSeries = this.series[seriesIx];\n            if (currentSeries.type === LINE || currentSeries.type === AREA) {\n                const line = currentSeries.line;\n                if (line && line.style === STEP) {\n                    centeredSeries.push(currentSeries);\n                }\n            }\n        }\n\n        for (let seriesIx = 0; seriesIx < centeredSeries.length; seriesIx++) {\n            const seriesAxis = centeredSeries[seriesIx].categoryAxis || \"\";\n            if (seriesAxis === categoryAxisName || (!seriesAxis && categoryAxisIndex === 0)) {\n                return true;\n            }\n        }\n    }\n\n    aggregatedAxis(categoryAxisName, categoryAxisIndex) {\n        const series = this.series;\n\n        for (let seriesIx = 0; seriesIx < series.length; seriesIx++) {\n            const seriesAxis = series[seriesIx].categoryAxis || \"\";\n            if ((seriesAxis === categoryAxisName || (!seriesAxis && categoryAxisIndex === 0)) && series[seriesIx].categoryField) {\n                return true;\n            }\n        }\n    }\n\n    createCategoryAxesLabels() {\n        const axes = this.axes;\n        for (let i = 0; i < axes.length; i++) {\n            if (axes[i] instanceof CategoryAxis) {\n                axes[i].createLabels();\n            }\n        }\n    }\n\n    createCategoryAxes(panes) {\n        const invertAxes = this.invertAxes;\n        const definitions = [].concat(this.options.categoryAxis);\n        const axes = [];\n\n        for (let i = 0; i < definitions.length; i++) {\n            let axisOptions = definitions[i];\n            const axisPane = this.findPane(axisOptions.pane);\n\n            if (inArray(axisPane, panes)) {\n                const { name, categories = [] } = axisOptions;\n                axisOptions = deepExtend({\n                    vertical: invertAxes,\n                    axisCrossingValue: invertAxes ? MAX_VALUE : 0\n                }, axisOptions);\n\n                if (!defined(axisOptions.justified)) {\n                    axisOptions.justified = this.isJustified();\n                }\n\n                if (this.axisRequiresRounding(name, i)) {\n                    axisOptions.justified = false;\n                }\n\n                let categoryAxis;\n\n                if (isDateAxis(axisOptions, categories[0])) {\n                    categoryAxis = new DateCategoryAxis(axisOptions, this.chartService);\n                } else {\n                    categoryAxis = new CategoryAxis(axisOptions, this.chartService);\n                }\n\n                if (name) {\n                    if (this.namedCategoryAxes[name]) {\n                        throw new Error(`Category axis with name ${ name } is already defined`);\n                    }\n                    this.namedCategoryAxes[name] = categoryAxis;\n                }\n\n                categoryAxis.axisIndex = i;\n                axes.push(categoryAxis);\n                this.appendAxis(categoryAxis);\n            }\n        }\n\n        const primaryAxis = this.categoryAxis || axes[0];\n        this.categoryAxis = primaryAxis;\n\n        if (invertAxes) {\n            this.axisY = primaryAxis;\n        } else {\n            this.axisX = primaryAxis;\n        }\n    }\n\n    isJustified() {\n        const series = this.series;\n\n        for (let i = 0; i < series.length; i++) {\n            const currentSeries = series[i];\n            if (!inArray(currentSeries.type, [ AREA, VERTICAL_AREA ])) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    createValueAxes(panes) {\n        const tracker = this.valueAxisRangeTracker;\n        const defaultRange = tracker.query();\n        const definitions = [].concat(this.options.valueAxis);\n        const invertAxes = this.invertAxes;\n        const baseOptions = { vertical: !invertAxes };\n        const axes = [];\n\n        if (this.stack100) {\n            baseOptions.roundToMajorUnit = false;\n            baseOptions.labels = { format: \"P0\" };\n        }\n\n        for (let i = 0; i < definitions.length; i++) {\n            const axisOptions = definitions[i];\n            const axisPane = this.findPane(axisOptions.pane);\n\n            if (inArray(axisPane, panes)) {\n                const name = axisOptions.name;\n                const defaultAxisRange = equalsIgnoreCase(axisOptions.type, LOGARITHMIC) ? { min: 0.1, max: 1 } : { min: 0, max: 1 };\n                const range = tracker.query(name) || defaultRange || defaultAxisRange;\n\n                if (i === 0 && range && defaultRange) {\n                    range.min = Math.min(range.min, defaultRange.min);\n                    range.max = Math.max(range.max, defaultRange.max);\n                }\n\n                let axisType;\n                if (equalsIgnoreCase(axisOptions.type, LOGARITHMIC)) {\n                    axisType = LogarithmicAxis;\n                } else {\n                    axisType = NumericAxis;\n                }\n\n                const valueAxis = new axisType(range.min, range.max,\n                    deepExtend({}, baseOptions, axisOptions),\n                    this.chartService\n                );\n\n                if (name) {\n                    if (this.namedValueAxes[name]) {\n                        throw new Error(`Value axis with name ${ name } is already defined`);\n                    }\n                    this.namedValueAxes[name] = valueAxis;\n                }\n                valueAxis.axisIndex = i;\n\n                axes.push(valueAxis);\n                this.appendAxis(valueAxis);\n            }\n        }\n\n        const primaryAxis = this.valueAxis || axes[0];\n        this.valueAxis = primaryAxis;\n\n        if (invertAxes) {\n            this.axisX = primaryAxis;\n        } else {\n            this.axisY = primaryAxis;\n        }\n    }\n\n    _dispatchEvent(chart, e, eventType) {\n        const coords = chart._eventCoordinates(e);\n        const point = new Point(coords.x, coords.y);\n        const pane = this.pointPane(point);\n        const categories = [];\n        const values = [];\n\n        if (!pane) {\n            return;\n        }\n\n        const allAxes = pane.axes;\n        for (let i = 0; i < allAxes.length; i++) {\n            const axis = allAxes[i];\n            if (axis.getValue) {\n                appendIfNotNull(values, axis.getValue(point));\n            } else {\n                appendIfNotNull(categories, axis.getCategory(point));\n            }\n        }\n\n        if (categories.length === 0) {\n            appendIfNotNull(categories, this.categoryAxis.getCategory(point));\n        }\n\n        if (categories.length > 0 && values.length > 0) {\n            chart.trigger(eventType, {\n                element: eventElement(e),\n                originalEvent: e,\n                category: singleItemOrArray(categories),\n                value: singleItemOrArray(values)\n            });\n        }\n    }\n\n    pointPane(point) {\n        const panes = this.panes;\n\n        for (let i = 0; i < panes.length; i++) {\n            const currentPane = panes[i];\n            if (currentPane.contentBox.containsPoint(point)) {\n                return currentPane;\n            }\n        }\n    }\n\n    updateAxisOptions(axis, options) {\n        const axesOptions = axis instanceof CategoryAxis ? [].concat(this.options.categoryAxis) : [].concat(this.options.valueAxis);\n        deepExtend(axesOptions[axis.axisIndex], options);\n    }\n}\n\nfunction groupSeries(series, axis, axisIx) {\n    return grep(series, function(s) {\n        return (axisIx === 0 && !s.categoryAxis) || (s.categoryAxis === axis);\n    });\n}\n\nsetDefaultOptions(CategoricalPlotArea, {\n    categoryAxis: {\n        categories: []\n    },\n    valueAxis: {}\n});\n\ndeepExtend(CategoricalPlotArea.prototype, PlotAreaEventsMixin);\n\nexport default CategoricalPlotArea;"],"names":["let","const","this","super","i","seriesIx"],"mappings":"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"}