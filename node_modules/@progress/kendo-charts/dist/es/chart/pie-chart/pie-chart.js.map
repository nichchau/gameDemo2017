{"version":3,"file":"pie-chart.js","sources":["pie-chart.js"],"sourcesContent":["import { drawing as draw } from '@progress/kendo-drawing';\n\nimport SeriesBinder from '../series-binder';\nimport PieSegment from './pie-segment';\nimport PieChartMixin from '../mixins/pie-chart-mixin';\nimport { ChartElement, Ring, Box, Point } from '../../core';\n\nimport { OUTSIDE_END, FADEIN, COLUMN } from '../constants';\nimport seriesTotal from '../utils/series-total';\nimport segmentVisible from '../utils/segment-visible';\nimport evalOptions from '../utils/eval-options';\n\nimport { CIRCLE, RIGHT, CENTER } from '../../common/constants';\nimport { deepExtend, defined, isFunction, last, round, setDefaultOptions, valueOrDefault } from '../../common';\n\nconst PIE_SECTOR_ANIM_DELAY = 70;\n\nclass PieChart extends ChartElement {\n    constructor(plotArea, options) {\n        super(options);\n\n        this.plotArea = plotArea;\n        this.chartService = plotArea.chartService;\n        this.points = [];\n        this.legendItems = [];\n        this.render();\n    }\n\n    render() {\n        this.traverseDataPoints(this.addValue.bind(this));\n    }\n\n    traverseDataPoints(callback) {\n        const { options, plotArea: { options: { seriesColors = [] } } } = this;\n        const colorsCount = seriesColors.length;\n        const series = options.series;\n        const seriesCount = series.length;\n\n        for (let seriesIx = 0; seriesIx < seriesCount; seriesIx++) {\n            const currentSeries = series[seriesIx];\n            const data = currentSeries.data;\n            const total = seriesTotal(currentSeries);\n            const anglePerValue = 360 / total;\n            let currentAngle;\n\n            if (defined(currentSeries.startAngle)) {\n                currentAngle = currentSeries.startAngle;\n            } else {\n                currentAngle = options.startAngle;\n            }\n\n            if (seriesIx !== seriesCount - 1) {\n                if (currentSeries.labels.position === OUTSIDE_END) {\n                    currentSeries.labels.position = CENTER;\n                }\n            }\n\n            for (let i = 0; i < data.length; i++) {\n                const pointData = SeriesBinder.current.bindPoint(currentSeries, i);\n                const value = pointData.valueFields.value;\n                const plotValue = Math.abs(value);\n                const fields = pointData.fields;\n                const angle = plotValue * anglePerValue;\n                const explode = data.length !== 1 && Boolean(fields.explode);\n\n                if (!isFunction(currentSeries.color)) {\n                    currentSeries.color = fields.color || seriesColors[i % colorsCount];\n                }\n\n                let visible = segmentVisible(currentSeries, fields, i);\n\n                callback(value, new Ring(null, 0, 0, currentAngle, angle), {\n                    owner: this,\n                    category: fields.category || \"\",\n                    index: i,\n                    series: currentSeries,\n                    seriesIx: seriesIx,\n                    dataItem: data[i],\n                    percentage: total !== 0 ? plotValue / total : 0,\n                    explode: explode,\n                    visibleInLegend: fields.visibleInLegend,\n                    visible: visible,\n                    zIndex: seriesCount - seriesIx,\n                    animationDelay: this.animationDelay(i, seriesIx, seriesCount)\n                });\n\n                if (visible !== false) {\n                    currentAngle += angle;\n                }\n            }\n        }\n    }\n\n    evalSegmentOptions(options, value, fields) {\n        const series = fields.series;\n\n        evalOptions(options, {\n            value: value,\n            series: series,\n            dataItem: fields.dataItem,\n            category: fields.category,\n            percentage: fields.percentage\n        }, { defaults: series._defaults, excluded: [ \"data\", \"content\", \"template\", \"visual\", \"toggle\" ] });\n    }\n\n    addValue(value, sector, fields) {\n        const segmentOptions = deepExtend({}, fields.series, { index: fields.index });\n        this.evalSegmentOptions(segmentOptions, value, fields);\n\n        this.createLegendItem(value, segmentOptions, fields);\n\n        if (fields.visible === false) {\n            return;\n        }\n\n        const segment = new PieSegment(value, sector, segmentOptions);\n        Object.assign(segment, fields);\n        this.append(segment);\n        this.points.push(segment);\n    }\n\n    reflow(targetBox) {\n        const { options, points, seriesConfigs = [] } = this;\n        const count = points.length;\n        const box = targetBox.clone();\n        const space = 5;\n        const minWidth = Math.min(box.width(), box.height());\n        const halfMinWidth = minWidth / 2;\n        const defaultPadding = minWidth - minWidth * 0.85;\n        const newBox = new Box(box.x1, box.y1, box.x1 + minWidth, box.y1 + minWidth);\n        const newBoxCenter = newBox.center();\n        const boxCenter = box.center();\n        const seriesCount = options.series.length;\n        const leftSideLabels = [];\n        const rightSideLabels = [];\n        let padding = valueOrDefault(options.padding, defaultPadding);\n\n        padding = padding > halfMinWidth - space ? halfMinWidth - space : padding;\n        newBox.translate(boxCenter.x - newBoxCenter.x, boxCenter.y - newBoxCenter.y);\n\n        const radius = halfMinWidth - padding;\n        const center = new Point(\n            radius + newBox.x1 + padding,\n            radius + newBox.y1 + padding\n        );\n\n        for (let i = 0; i < count; i++) {\n            const segment = points[i];\n            const sector = segment.sector;\n            const seriesIndex = segment.seriesIx;\n            sector.radius = radius;\n            sector.center = center;\n\n            if (seriesConfigs.length) {\n                const seriesConfig = seriesConfigs[seriesIndex];\n                sector.innerRadius = seriesConfig.innerRadius;\n                sector.radius = seriesConfig.radius;\n            }\n\n            if (seriesIndex === seriesCount - 1 && segment.explode) {\n                sector.center = sector.clone().setRadius(sector.radius * 0.15).point(sector.middle());\n            }\n\n            segment.reflow(newBox);\n\n            const label = segment.label;\n            if (label) {\n                if (label.options.position === OUTSIDE_END) {\n                    if (seriesIndex === seriesCount - 1) {\n                        if (label.orientation === RIGHT) {\n                            rightSideLabels.push(label);\n                        } else {\n                            leftSideLabels.push(label);\n                        }\n                    }\n                }\n            }\n        }\n\n        if (leftSideLabels.length > 0) {\n            leftSideLabels.sort(this.labelComparator(true));\n            this.leftLabelsReflow(leftSideLabels);\n        }\n\n        if (rightSideLabels.length > 0) {\n            rightSideLabels.sort(this.labelComparator(false));\n            this.rightLabelsReflow(rightSideLabels);\n        }\n\n        this.box = newBox;\n    }\n\n    leftLabelsReflow(labels) {\n        const distances = this.distanceBetweenLabels(labels);\n\n        this.distributeLabels(distances, labels);\n    }\n\n    rightLabelsReflow(labels) {\n        const distances = this.distanceBetweenLabels(labels);\n\n        this.distributeLabels(distances, labels);\n    }\n\n    distanceBetweenLabels(labels) {\n        const segment = last(this.points);\n        const sector = segment.sector;\n        const count = labels.length - 1;\n        const lr = sector.radius + segment.options.labels.distance;\n        const distances = [];\n        let firstBox = labels[0].box;\n        let distance = round(firstBox.y1 - (sector.center.y - lr - firstBox.height() - firstBox.height() / 2));\n\n        distances.push(distance);\n\n        for (let i = 0; i < count; i++) {\n            const secondBox = labels[i + 1].box;\n\n            firstBox = labels[i].box;\n            distance = round(secondBox.y1 - firstBox.y2);\n            distances.push(distance);\n        }\n        distance = round(sector.center.y + lr - labels[count].box.y2 - labels[count].box.height() / 2);\n        distances.push(distance);\n\n        return distances;\n    }\n\n    distributeLabels(distances, labels) {\n        const count = distances.length;\n        let left, right, remaining;\n\n        for (let i = 0; i < count; i++) {\n            remaining = -distances[i];\n            left = right = i;\n\n            while (remaining > 0 && (left >= 0 || right < count)) {\n                remaining = this._takeDistance(distances, i, --left, remaining);\n                remaining = this._takeDistance(distances, i, ++right, remaining);\n            }\n        }\n\n        this.reflowLabels(distances, labels);\n    }\n\n    _takeDistance(distances, anchor, position, amount) {\n        let result = amount;\n        if (distances[position] > 0) {\n            const available = Math.min(distances[position], result);\n            result -= available;\n            distances[position] -= available;\n            distances[anchor] += available;\n        }\n\n        return result;\n    }\n\n    reflowLabels(distances, labels) {\n        const segment = last(this.points);\n        const sector = segment.sector;\n        const labelOptions = segment.options.labels;\n        const labelsCount = labels.length;\n        const labelDistance = labelOptions.distance;\n        let boxY = sector.center.y - (sector.radius + labelDistance) - labels[0].box.height();\n        let boxX;\n\n        distances[0] += 2;\n        for (let i = 0; i < labelsCount; i++) {\n            const label = labels[i];\n            const box = label.box;\n\n            boxY += distances[i];\n            boxX = this.hAlignLabel(\n                box.x2,\n                sector.clone().expand(labelDistance),\n                boxY,\n                boxY + box.height(),\n                label.orientation === RIGHT);\n\n            if (label.orientation === RIGHT) {\n                if (labelOptions.align !== CIRCLE) {\n                    boxX = sector.radius + sector.center.x + labelDistance;\n                }\n                label.reflow(new Box(boxX + box.width(), boxY, boxX, boxY));\n            } else {\n                if (labelOptions.align !== CIRCLE) {\n                    boxX = sector.center.x - sector.radius - labelDistance;\n                }\n                label.reflow(new Box(boxX - box.width(), boxY, boxX, boxY));\n            }\n\n            boxY += box.height();\n        }\n    }\n\n    createVisual() {\n        const { options: { connectors }, points } = this;\n        const count = points.length;\n        const space = 4;\n\n        super.createVisual();\n\n        this._connectorLines = [];\n\n        for (let i = 0; i < count; i++) {\n            const segment = points[i];\n            const { sector, label } = segment;\n            const angle = sector.middle();\n            const connectorsColor = (segment.options.connectors || {}).color || connectors.color;\n\n            if (label) {\n                const connectorLine = new draw.Path({\n                    stroke: {\n                        color: connectorsColor,\n                        width: connectors.width\n                    },\n                    animation: {\n                        type: FADEIN,\n                        delay: segment.animationDelay\n                    }\n                });\n\n                if (label.options.position === OUTSIDE_END && segment.value !== 0) {\n                    const box = label.box;\n                    const centerPoint = sector.center;\n                    let start = sector.point(angle);\n                    let middle = new Point(box.x1, box.center().y);\n                    let sr, end, crossing;\n\n                    start = sector.clone().expand(connectors.padding).point(angle);\n                    connectorLine.moveTo(start.x, start.y);\n                    // TODO: Extract into a method to remove duplication\n                    if (label.orientation === RIGHT) {\n                        end = new Point(box.x1 - connectors.padding, box.center().y);\n                        crossing = intersection(centerPoint, start, middle, end);\n                        middle = new Point(end.x - space, end.y);\n                        crossing = crossing || middle;\n                        crossing.x = Math.min(crossing.x, middle.x);\n\n                        if (this.pointInCircle(crossing, sector.center, sector.radius + space) ||\n                            crossing.x < sector.center.x) {\n                            sr = sector.center.x + sector.radius + space;\n                            if (segment.options.labels.align !== COLUMN) {\n                                if (sr < middle.x) {\n                                    connectorLine.lineTo(sr, start.y);\n                                } else {\n                                    connectorLine.lineTo(start.x + space * 2, start.y);\n                                }\n                            } else {\n                                connectorLine.lineTo(sr, start.y);\n                            }\n                            connectorLine.lineTo(middle.x, end.y);\n                        } else {\n                            crossing.y = end.y;\n                            connectorLine.lineTo(crossing.x, crossing.y);\n                        }\n                    } else {\n                        end = new Point(box.x2 + connectors.padding, box.center().y);\n                        crossing = intersection(centerPoint, start, middle, end);\n                        middle = new Point(end.x + space, end.y);\n                        crossing = crossing || middle;\n                        crossing.x = Math.max(crossing.x, middle.x);\n\n                        if (this.pointInCircle(crossing, sector.center, sector.radius + space) ||\n                            crossing.x > sector.center.x) {\n                            sr = sector.center.x - sector.radius - space;\n                            if (segment.options.labels.align !== COLUMN) {\n                                if (sr > middle.x) {\n                                    connectorLine.lineTo(sr, start.y);\n                                } else {\n                                    connectorLine.lineTo(start.x - space * 2, start.y);\n                                }\n                            } else {\n                                connectorLine.lineTo(sr, start.y);\n                            }\n                            connectorLine.lineTo(middle.x, end.y);\n                        } else {\n                            crossing.y = end.y;\n                            connectorLine.lineTo(crossing.x, crossing.y);\n                        }\n                    }\n\n                    connectorLine.lineTo(end.x, end.y);\n\n                    this._connectorLines.push(connectorLine);\n                    this.visual.append(connectorLine);\n                }\n            }\n        }\n    }\n\n    labelComparator(reverse) {\n        const reverseValue = reverse ? -1 : 1;\n\n        return function(a, b) {\n            const first = (a.parent.sector.middle() + 270) % 360;\n            const second = (b.parent.sector.middle() + 270) % 360;\n            return (first - second) * reverseValue;\n        };\n    }\n\n    hAlignLabel(originalX, sector, y1, y2, direction) {\n        const { radius, center: { x: cx, y: cy } } = sector;\n        const t = Math.min(Math.abs(cy - y1), Math.abs(cy - y2));\n\n        if (t > radius) {\n            return originalX;\n        }\n\n        return cx + Math.sqrt((radius * radius) - (t * t)) * (direction ? 1 : -1);\n    }\n\n    pointInCircle(point, center, radius) {\n        return Math.pow(center.x - point.x, 2) + Math.pow(center.y - point.y, 2) < Math.pow(radius, 2);\n    }\n\n    formatPointValue(point, format) {\n        return this.chartService.format.auto(format, point.value);\n    }\n\n    animationDelay(categoryIndex) {\n        return categoryIndex * PIE_SECTOR_ANIM_DELAY;\n    }\n}\n\nfunction intersection(a1, a2, b1, b2) {\n    const uat = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);\n    const ub = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n\n    let result;\n    if (ub !== 0) {\n        const ua = (uat / ub);\n\n        result = new Point(\n            a1.x + ua * (a2.x - a1.x),\n            a1.y + ua * (a2.y - a1.y)\n        );\n    }\n\n    return result;\n}\n\nsetDefaultOptions(PieChart, {\n    startAngle: 90,\n    connectors: {\n        width: 2,\n        color: \"#939393\",\n        padding: 8\n    },\n    inactiveItems: {\n        markers: {},\n        labels: {}\n    }\n});\n\ndeepExtend(PieChart.prototype, PieChartMixin);\n\nexport default PieChart;\n"],"names":["const","super","let","this"],"mappings":"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"}