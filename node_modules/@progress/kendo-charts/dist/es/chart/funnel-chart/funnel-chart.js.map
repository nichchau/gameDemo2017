{"version":3,"file":"funnel-chart.js","sources":["funnel-chart.js"],"sourcesContent":["import { geometry as geom, Color } from '@progress/kendo-drawing';\n\nimport { ChartElement, TextBox } from '../../core';\nimport PieChartMixin from '../mixins/pie-chart-mixin';\nimport SeriesBinder from '../series-binder';\nimport FunnelSegment from './funnel-segment';\n\nimport seriesTotal from '../utils/series-total';\nimport evalOptions from '../utils/eval-options';\nimport segmentVisible from '../utils/segment-visible';\n\nimport { BLACK, WHITE, CENTER, LEFT } from '../../common/constants';\nimport { deepExtend, isFunction, getTemplate, limitValue, setDefaultOptions } from '../../common';\n\nclass FunnelChart extends ChartElement {\n    constructor(plotArea, options) {\n        super(options);\n\n        this.plotArea = plotArea;\n        this.points = [];\n        this.labels = [];\n        this.legendItems = [];\n        this.render();\n    }\n\n    formatPointValue(point, format) {\n        return this.chartService.format.auto(format,point.value);\n    }\n\n    render() {\n        const { options, plotArea: { options: { seriesColors = [] } } } = this;\n        const series = options.series[0];\n        const data = series.data;\n\n        if (!data) {\n            return;\n        }\n\n        const total = seriesTotal(series);\n\n        for (let i = 0; i < data.length; i++) {\n            const pointData = SeriesBinder.current.bindPoint(series, i);\n            const value = pointData.valueFields.value;\n\n            if (value === null || value === undefined) {\n                continue;\n            }\n\n            let fields = pointData.fields;\n\n            if (!isFunction(series.color)) {\n                series.color = fields.color || seriesColors[i % seriesColors.length];\n            }\n\n            const visible = segmentVisible(series, fields, i);\n            fields = deepExtend({\n                index: i,\n                owner: this,\n                series: series,\n                dataItem: data[i],\n                percentage: Math.abs(value) / total\n            }, fields, { visible: visible });\n\n            const segment = this.createSegment(value, fields);\n            const label = this.createLabel(value, fields);\n\n            if (segment && label) {\n                segment.append(label);\n            }\n        }\n    }\n\n    evalSegmentOptions(options, value, fields) {\n        const series = fields.series;\n\n        evalOptions(options, {\n            value: value,\n            series: series,\n            dataItem: fields.dataItem,\n            index: fields.index\n        }, { defaults: series._defaults, excluded: [ \"data\", \"content\", \"template\", \"toggle\", \"visual\" ] });\n    }\n\n    createSegment(value, fields) {\n        const seriesOptions = deepExtend({}, fields.series);\n        this.evalSegmentOptions(seriesOptions, value, fields);\n\n        this.createLegendItem(value, seriesOptions, fields);\n\n        if (fields.visible !== false) {\n\n            const segment = new FunnelSegment(value, seriesOptions, fields);\n            Object.assign(segment, fields);\n\n            this.append(segment);\n            this.points.push(segment);\n\n            return segment;\n        }\n    }\n\n    createLabel(value, fields) {\n        const { series, dataItem } = fields;\n        const labels = deepExtend({}, this.options.labels, series.labels);\n        let text = value;\n\n        if (labels.visible) {\n            const labelTemplate = getTemplate(labels);\n            if (labelTemplate) {\n                text = labelTemplate({\n                    dataItem: dataItem,\n                    value: value,\n                    percentage: fields.percentage,\n                    category: fields.category,\n                    series: series\n                });\n            } else if (labels.format) {\n                text = this.plotArea.chartService.format.auto(labels.format, text);\n            }\n\n            if (!labels.color) {\n                const brightnessValue = new Color(series.color).percBrightness();\n                if (brightnessValue > 180) {\n                    labels.color = BLACK;\n                } else {\n                    labels.color = WHITE;\n                }\n                if (!labels.background) {\n                    labels.background = series.color;\n                }\n            }\n\n            this.evalSegmentOptions(labels, value, fields);\n            const textBox = new TextBox(text, deepExtend({\n                vAlign: labels.position\n            }, labels));\n\n            this.labels.push(textBox);\n\n            return textBox;\n        }\n    }\n\n    labelPadding() {\n        const labels = this.labels;\n        const padding = { left: 0, right: 0 };\n\n        for (let i = 0; i < labels.length; i++) {\n            const label = labels[i];\n            const align = label.options.align;\n            if (align !== CENTER) {\n                const width = labels[i].box.width();\n\n                if (align === LEFT) {\n                    padding.left = Math.max(padding.left, width);\n                } else {\n                    padding.right = Math.max(padding.right, width);\n                }\n            }\n        }\n\n        return padding;\n    }\n\n    dynamicSlopeReflow(box, width, totalHeight) {\n        const { options, points: segments } = this;\n        const count = segments.length;\n        const firstSegment = segments[0];\n        let maxSegment = firstSegment;\n\n        for (let idx = 0; idx < segments.length; idx++) {\n            if (segments[idx].percentage > maxSegment.percentage) {\n                maxSegment = segments[idx];\n            }\n        }\n\n        let lastUpperSide = (firstSegment.percentage / maxSegment.percentage) * width;\n        let previousOffset = (width - lastUpperSide) / 2;\n        let previousHeight = 0;\n\n        for (let idx = 0; idx < count; idx++) {\n            const percentage = segments[idx].percentage;\n            const nextSegment = segments[idx + 1];\n            const nextPercentage = (nextSegment ? nextSegment.percentage : percentage);\n            const points = segments[idx].points = [];\n            const height = (options.dynamicHeight) ? (totalHeight * percentage) : (totalHeight / count);\n            let offset;\n\n            if (!percentage) {\n                offset = nextPercentage ? 0 : width / 2;\n            } else {\n                offset = (width - lastUpperSide * (nextPercentage / percentage)) / 2;\n            }\n\n            offset = limitValue(offset, 0, width);\n\n            points.push(new geom.Point(box.x1 + previousOffset, box.y1 + previousHeight));\n            points.push(new geom.Point(box.x1 + width - previousOffset, box.y1 + previousHeight));\n            points.push(new geom.Point(box.x1 + width - offset, box.y1 + height + previousHeight));\n            points.push(new geom.Point(box.x1 + offset, box.y1 + height + previousHeight));\n\n            previousOffset = offset;\n            previousHeight += height + options.segmentSpacing;\n            lastUpperSide = limitValue(width - 2 * offset, 0, width);\n        }\n    }\n\n    constantSlopeReflow(box, width, totalHeight) {\n        const { options, points: segments } = this;\n        const count = segments.length;\n        const decreasingWidth = options.neckRatio <= 1;\n        const neckRatio = decreasingWidth ? options.neckRatio * width : width;\n        let previousOffset = decreasingWidth ? 0 : (width - width / options.neckRatio) / 2;\n        const topMostWidth = decreasingWidth ? width : width - previousOffset * 2;\n        const finalNarrow = (topMostWidth - neckRatio) / 2;\n        let previousHeight = 0;\n\n        for (let idx = 0; idx < count; idx++) {\n            const points = segments[idx].points = [];\n            const percentage = segments[idx].percentage;\n            const offset = (options.dynamicHeight) ? (finalNarrow * percentage) : (finalNarrow / count);\n            const height = (options.dynamicHeight) ? (totalHeight * percentage) : (totalHeight / count);\n\n            points.push(new geom.Point(box.x1 + previousOffset, box.y1 + previousHeight));\n            points.push(new geom.Point(box.x1 + width - previousOffset, box.y1 + previousHeight));\n            points.push(new geom.Point(box.x1 + width - previousOffset - offset, box.y1 + height + previousHeight));\n            points.push(new geom.Point(box.x1 + previousOffset + offset,box.y1 + height + previousHeight));\n            previousOffset += offset;\n            previousHeight += height + options.segmentSpacing;\n        }\n    }\n\n    reflow(chartBox) {\n        const points = this.points;\n        const count = points.length;\n\n        if (!count) {\n            return;\n        }\n\n        const options = this.options;\n        const box = chartBox.clone().unpad(this.labelPadding());\n        const totalHeight = box.height() - options.segmentSpacing * (count - 1);\n        const width = box.width();\n\n        if (options.dynamicSlope) {\n            this.dynamicSlopeReflow(box, width, totalHeight);\n        } else {\n            this.constantSlopeReflow(box, width, totalHeight);\n        }\n\n        for (let idx = 0; idx < count; idx++) {\n            points[idx].reflow(chartBox);\n        }\n    }\n}\n\nsetDefaultOptions(FunnelChart, {\n    neckRatio: 0.3,\n    width: 300,\n    dynamicSlope: false,\n    dynamicHeight: true,\n    segmentSpacing: 0,\n    labels: {\n        visible: false,\n        align: CENTER,\n        position: CENTER,\n        zIndex: 1\n    }\n});\n\ndeepExtend(FunnelChart.prototype, PieChartMixin);\n\nexport default FunnelChart;\n"],"names":["super","const","let","this","idx"],"mappings":"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"}