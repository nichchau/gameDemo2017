{"version":3,"file":"date-value-axis.js","sources":["date-value-axis.js"],"sourcesContent":["import Axis from './axis';\nimport NumericAxis from './numeric-axis';\nimport AxisLabel from './axis-label';\nimport { DateLabelFormats } from './constants';\n\nimport { BLACK, DATE, COORD_PRECISION, DEFAULT_PRECISION, X, Y } from '../common/constants';\nimport { setDefaultOptions, deepExtend, limitValue, round } from '../common';\n\nimport autoMajorUnit from './utils/auto-major-unit';\nimport ceil from './utils/ceil';\n\nimport { toDate, toTime, floorDate, ceilDate, duration, addDuration, addTicks, dateDiff, absoluteDateDiff, dateComparer, parseDate, parseDates } from '../date-utils';\nimport { HOURS, DAYS, WEEKS, MONTHS, YEARS, TIME_PER_DAY, TIME_PER_WEEK, TIME_PER_MONTH, TIME_PER_YEAR, TIME_PER_UNIT } from '../date-utils/constants';\n\nclass DateValueAxis extends Axis {\n    constructor(seriesMin, seriesMax, axisOptions, chartService) {\n        const min = toDate(seriesMin);\n        const max = toDate(seriesMax);\n\n        const intlService = chartService.intl;\n        let options = axisOptions || {};\n        options = deepExtend(options || {}, {\n            min: parseDate(intlService, options.min),\n            max: parseDate(intlService, options.max),\n            axisCrossingValue: parseDates(intlService, options.axisCrossingValues || options.axisCrossingValue)\n        });\n        options = applyDefaults(min, max, options);\n\n        super(options, chartService);\n\n        this.seriesMin = min;\n        this.seriesMax = max;\n        this.totalMin = toTime(floorDate(toTime(min) - 1, options.baseUnit));\n        this.totalMax = toTime(ceilDate(toTime(max) + 1, options.baseUnit));\n    }\n\n    range() {\n        const options = this.options;\n        return { min: options.min, max: options.max };\n    }\n\n    getDivisions(stepValue) {\n        const options = this.options;\n\n        return Math.floor(\n            duration(options.min, options.max, options.baseUnit) / stepValue + 1\n        );\n    }\n\n    getTickPositions(step) {\n        const options = this.options;\n        const vertical = options.vertical;\n        const lineBox = this.lineBox();\n        const dir = (vertical ? -1 : 1) * (options.reverse ? -1 : 1);\n        const startEdge = dir === 1 ? 1 : 2;\n        const start = lineBox[(vertical ? Y : X) + startEdge];\n        const divisions = this.getDivisions(step);\n        const timeRange = dateDiff(options.max, options.min);\n        const lineSize = vertical ? lineBox.height() : lineBox.width();\n        const scale = lineSize / timeRange;\n\n        const positions = [ start ];\n        for (let i = 1; i < divisions; i++) {\n            const date = addDuration(options.min, i * step, options.baseUnit);\n            const pos = start + dateDiff(date, options.min) * scale * dir;\n\n            positions.push(round(pos, COORD_PRECISION));\n        }\n\n        return positions;\n    }\n\n    getMajorTickPositions() {\n        return this.getTickPositions(this.options.majorUnit);\n    }\n\n    getMinorTickPositions() {\n        return this.getTickPositions(this.options.minorUnit);\n    }\n\n    getSlot(a, b, limit) {\n        return NumericAxis.prototype.getSlot.call(\n            this, toDate(a), toDate(b), limit\n        );\n    }\n\n    getValue(point) {\n        const value = NumericAxis.prototype.getValue.call(this, point);\n\n        return value !== null ? toDate(value) : null;\n    }\n\n    labelsCount() {\n        return this.getDivisions(this.options.majorUnit);\n    }\n\n    createAxisLabel(index, labelOptions) {\n        const options = this.options;\n        const offset = index * options.majorUnit;\n        let date = options.min;\n\n        if (offset > 0) {\n            date = addDuration(date, offset, options.baseUnit);\n        }\n\n        const unitFormat = labelOptions.dateFormats[options.baseUnit];\n        labelOptions.format = labelOptions.format || unitFormat;\n\n        const text = this.axisLabelText(date, null, labelOptions);\n        return new AxisLabel(date, text, index, null, labelOptions);\n    }\n\n    translateRange(delta, exact) {\n        const options = this.options;\n        const { baseUnit, weekStartDay } = options;\n        const lineBox = this.lineBox();\n        const size = options.vertical ? lineBox.height() : lineBox.width();\n        const range = this.range();\n        const scale = size / dateDiff(range.max, range.min);\n        const offset = round(delta / scale, DEFAULT_PRECISION);\n        let from = addTicks(options.min, offset);\n        let to = addTicks(options.max, offset);\n\n        if (!exact) {\n            from = addDuration(from, 0, baseUnit, weekStartDay);\n            to = addDuration(to, 0, baseUnit, weekStartDay);\n        }\n\n        return {\n            min: from,\n            max: to\n        };\n    }\n\n    scaleRange(delta) {\n        let { min: from, max: to } = this.options;\n        let rounds = Math.abs(delta);\n\n        while (rounds--) {\n            const range = dateDiff(from, to);\n            const step = Math.round(range * 0.1);\n            if (delta < 0) {\n                from = addTicks(from, step);\n                to = addTicks(to, -step);\n            } else {\n                from = addTicks(from, -step);\n                to = addTicks(to, step);\n            }\n        }\n\n        return { min: from, max: to };\n    }\n\n    shouldRenderNote(value) {\n        const range = this.range();\n\n        return dateComparer(value, range.min) >= 0 && dateComparer(value, range.max) <= 0;\n    }\n\n    pan(delta) {\n        const range = this.translateRange(delta, true);\n        const limittedRange = this.limitRange(toTime(range.min), toTime(range.max), this.totalMin, this.totalMax);\n\n        if (limittedRange) {\n            return {\n                min: toDate(limittedRange.min),\n                max: toDate(limittedRange.max)\n            };\n        }\n    }\n\n    pointsRange(start, end) {\n        const startValue = this.getValue(start);\n        const endValue = this.getValue(end);\n        const min = Math.min(startValue, endValue);\n        const max = Math.max(startValue, endValue);\n\n        return {\n            min: toDate(min),\n            max: toDate(max)\n        };\n    }\n\n    zoomRange(delta) {\n        const range = this.scaleRange(delta);\n        const min = toDate(limitValue(toTime(range.min), this.totalMin, this.totalMax));\n        const max = toDate(limitValue(toTime(range.max), this.totalMin, this.totalMax));\n\n        return {\n            min: min,\n            max: max\n        };\n    }\n}\n\nfunction timeUnits(delta) {\n    let unit = HOURS;\n\n    if (delta >= TIME_PER_YEAR) {\n        unit = YEARS;\n    } else if (delta >= TIME_PER_MONTH) {\n        unit = MONTHS;\n    } else if (delta >= TIME_PER_WEEK) {\n        unit = WEEKS;\n    } else if (delta >= TIME_PER_DAY) {\n        unit = DAYS;\n    }\n\n    return unit;\n}\n\nfunction applyDefaults(seriesMin, seriesMax, options) {\n    const min = options.min || seriesMin;\n    const max = options.max || seriesMax;\n    const baseUnit = options.baseUnit || (max && min ? timeUnits(absoluteDateDiff(max, min)) : HOURS);\n    const baseUnitTime = TIME_PER_UNIT[baseUnit];\n    const autoMin = floorDate(toTime(min) - 1, baseUnit) || toDate(max);\n    const autoMax = ceilDate(toTime(max) + 1, baseUnit);\n    const userMajorUnit = options.majorUnit ? options.majorUnit : undefined;\n    const majorUnit = userMajorUnit || ceil(\n                        autoMajorUnit(autoMin.getTime(), autoMax.getTime()),\n                        baseUnitTime\n                    ) / baseUnitTime;\n    const actualUnits = duration(autoMin, autoMax, baseUnit);\n    const totalUnits = ceil(actualUnits, majorUnit);\n    const unitsToAdd = totalUnits - actualUnits;\n    const head = Math.floor(unitsToAdd / 2);\n    const tail = unitsToAdd - head;\n\n    if (!options.baseUnit) {\n        delete options.baseUnit;\n    }\n\n    options.baseUnit = options.baseUnit || baseUnit;\n    options.min = options.min || addDuration(autoMin, -head, baseUnit);\n    options.max = options.max || addDuration(autoMax, tail, baseUnit);\n    options.minorUnit = options.minorUnit || majorUnit / 5;\n    options.majorUnit = majorUnit;\n\n    return options;\n}\n\nsetDefaultOptions(DateValueAxis, {\n    type: DATE,\n    majorGridLines: {\n        visible: true,\n        width: 1,\n        color: BLACK\n    },\n    labels: {\n        dateFormats: DateLabelFormats\n    }\n});\n\nexport default DateValueAxis;"],"names":["const","let","super"],"mappings":"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"}