{"version":3,"file":"date-category-axis.js","sources":["date-category-axis.js"],"sourcesContent":["import CategoryAxis from './category-axis';\nimport AxisLabel from './axis-label';\n\nimport { DEFAULT_PRECISION, MAX_VALUE, OBJECT, DATE } from '../common/constants';\nimport { deepExtend, defined, inArray, last, limitValue, round, setDefaultOptions, sparseArrayLimits } from '../common';\n\nimport { MILLISECONDS, SECONDS, MINUTES, HOURS, DAYS, WEEKS, MONTHS, YEARS,\n    TIME_PER_MINUTE, TIME_PER_HOUR, TIME_PER_DAY, TIME_PER_WEEK,\n    TIME_PER_MONTH, TIME_PER_YEAR, TIME_PER_UNIT } from '../date-utils/constants';\nimport { dateComparer, toDate, addTicks, addDuration, dateDiff, absoluteDateDiff, dateIndex, dateEquals, toTime, floorDate, parseDate, parseDates } from '../date-utils';\n\nimport { DateLabelFormats } from './constants';\n\nconst AUTO = \"auto\";\nconst BASE_UNITS = [\n    MILLISECONDS, SECONDS, MINUTES, HOURS, DAYS, WEEKS, MONTHS, YEARS\n];\nconst FIT = \"fit\";\n\nclass DateCategoryAxis extends CategoryAxis {\n\n    constructor(axisOptions, chartService) {\n        super(axisOptions, chartService);\n\n        const intlService = chartService.intl;\n        let options = this.options;\n\n        options = deepExtend({\n            roundToBaseUnit: true\n        }, options, {\n            categories: parseDates(intlService, options.categories),\n            min: parseDate(intlService, options.min),\n            max: parseDate(intlService, options.max)\n        });\n\n        options.userSetBaseUnit = options.userSetBaseUnit || options.baseUnit;\n        options.userSetBaseUnitStep = options.userSetBaseUnitStep || options.baseUnitStep;\n\n        if (options.categories && options.categories.length > 0) {\n            const baseUnit = (options.baseUnit || \"\").toLowerCase();\n            const useDefault = baseUnit !== FIT && !inArray(baseUnit, BASE_UNITS);\n\n            if (useDefault) {\n                options.baseUnit = this.defaultBaseUnit(options);\n            }\n\n            if (baseUnit === FIT || options.baseUnitStep === AUTO) {\n                this.autoBaseUnit(options);\n            }\n\n            this._groupsStart = addDuration(options.categories[0], 0, options.baseUnit, options.weekStartDay);\n\n            this.groupCategories(options);\n        } else {\n            options.baseUnit = options.baseUnit || DAYS;\n        }\n\n        this.options = options;\n    }\n\n    _initCategories() {}\n\n    shouldRenderNote(value) {\n        const range = this.range();\n        const categories = this.options.categories || [];\n\n        return dateComparer(value, range.min) >= 0 && dateComparer(value, range.max) <= 0 && categories.length;\n    }\n\n    parseNoteValue(value) {\n        return parseDate(this.chartService.intl, value);\n    }\n\n    noteSlot(value) {\n        return this.getSlot(value);\n    }\n\n    translateRange(delta) {\n        const options = this.options;\n        const { baseUnit, weekStartDay, vertical } = options;\n        const lineBox = this.lineBox();\n        const size = vertical ? lineBox.height() : lineBox.width();\n        let range = this.range();\n        const scale = size / (range.max - range.min);\n        const offset = round(delta / scale, DEFAULT_PRECISION);\n\n        if (range.min && range.max) {\n            const from = addTicks(options.min || range.min, offset);\n            const to = addTicks(options.max || range.max, offset);\n\n            range = {\n                min: addDuration(from, 0, baseUnit, weekStartDay),\n                max: addDuration(to, 0, baseUnit, weekStartDay)\n            };\n        }\n\n        return range;\n    }\n\n    scaleRange(delta) {\n        let rounds = Math.abs(delta);\n        let result = this.range();\n        let { min: from, max: to } = result;\n\n        if (from && to) {\n            while (rounds--) {\n                const range = dateDiff(from, to);\n                const step = Math.round(range * 0.1);\n                if (delta < 0) {\n                    from = addTicks(from, step);\n                    to = addTicks(to, -step);\n                } else {\n                    from = addTicks(from, -step);\n                    to = addTicks(to, step);\n                }\n            }\n\n            result = { min: from, max: to };\n        }\n\n        return result;\n    }\n\n    defaultBaseUnit(options) {\n        const categories = options.categories;\n        const count = defined(categories) ? categories.length : 0;\n        let minDiff = MAX_VALUE;\n        let lastCategory, unit;\n\n        for (let categoryIx = 0; categoryIx < count; categoryIx++) {\n            const category = categories[categoryIx];\n\n            if (category && lastCategory) {\n                const diff = absoluteDateDiff(category, lastCategory);\n                if (diff > 0) {\n                    minDiff = Math.min(minDiff, diff);\n\n                    if (minDiff >= TIME_PER_YEAR) {\n                        unit = YEARS;\n                    } else if (minDiff >= TIME_PER_MONTH - TIME_PER_DAY * 3) {\n                        unit = MONTHS;\n                    } else if (minDiff >= TIME_PER_WEEK) {\n                        unit = WEEKS;\n                    } else if (minDiff >= TIME_PER_DAY) {\n                        unit = DAYS;\n                    } else if (minDiff >= TIME_PER_HOUR) {\n                        unit = HOURS;\n                    } else if (minDiff >= TIME_PER_MINUTE) {\n                        unit = MINUTES;\n                    } else {\n                        unit = SECONDS;\n                    }\n                }\n            }\n\n            lastCategory = category;\n        }\n\n        return unit || DAYS;\n    }\n\n    _categoryRange(categories) {\n        let range = categories._range;\n        if (!range) {\n            range = categories._range = sparseArrayLimits(categories);\n        }\n\n        return range;\n    }\n\n    totalRange() {\n        return {\n            min: 0,\n            max: this.options.categories.length\n        };\n    }\n\n    rangeIndices() {\n        const options = this.options;\n        const { categories, baseUnit } = options;\n        const baseUnitStep = options.baseUnitStep || 1;\n        const categoryLimits = this.categoriesRange();\n        const min = toDate(options.min || categoryLimits.min);\n        const max = toDate(options.max || categoryLimits.max);\n        let minIdx = 0, maxIdx = 0;\n\n        if (categories.length) {\n            minIdx = dateIndex(min, categories[0], baseUnit, baseUnitStep);\n            maxIdx = dateIndex(max, categories[0], baseUnit, baseUnitStep);\n\n            if (options.roundToBaseUnit) {\n                minIdx = Math.floor(minIdx);\n                maxIdx = options.justified ? Math.floor(maxIdx) : Math.ceil(maxIdx);\n            }\n        }\n\n        return { min: minIdx, max: maxIdx };\n    }\n\n    labelsRange() {\n        const options = this.options;\n        const labelOptions = options.labels;\n        const range = this.rangeIndices();\n        const min = Math.floor(range.min);\n        const max = Math.ceil(range.max);\n\n        return {\n            min: min + labelOptions.skip,\n            max: options.categories.length ? max + (options.justified ? 1 : 0) : 0\n        };\n    }\n\n    categoriesRange() {\n        const options = this.options;\n        const range = this._categoryRange(options.srcCategories || options.categories);\n\n        let max = toDate(range.max);\n        if (!options.justified && dateEquals(max, this._roundToTotalStep(max, options, false))) {\n            max = this._roundToTotalStep(max, options, true, true);\n        }\n        return {\n            min: toDate(range.min),\n            max: max\n        };\n    }\n\n    currentRange() {\n        const options = this.options;\n        const round = options.roundToBaseUnit !== false;\n        const totalRange = this.categoriesRange();\n        let { min, max } = options;\n\n        if (!min) {\n            min = round ? this._roundToTotalStep(totalRange.min, options, false) : totalRange.min;\n        }\n\n        if (!max) {\n            max = round ? this._roundToTotalStep(totalRange.max, options, !options.justified) : totalRange.max;\n        }\n\n        return {\n            min: min,\n            max: max\n        };\n    }\n\n    datesRange() {\n        const range = this._categoryRange(this.options.srcCategories || this.options.categories);\n        return {\n            min: toDate(range.min),\n            max: toDate(range.max)\n        };\n    }\n\n    pan(delta) {\n        const options = this.options;\n        const lineBox = this.lineBox();\n        const size = options.vertical ? lineBox.height() : lineBox.width();\n        const { min, max } = this.currentRange();\n        const totalLimits = this.totalLimits();\n        const scale = size / (max - min);\n        const offset = round(delta / scale, DEFAULT_PRECISION);\n        const from = addTicks(min, offset);\n        const to = addTicks(max, offset);\n\n        const panRange = this.limitRange(toTime(from), toTime(to), toTime(totalLimits.min), toTime(totalLimits.max), offset);\n\n        if (panRange) {\n            panRange.min = toDate(panRange.min);\n            panRange.max = toDate(panRange.max);\n            panRange.baseUnit = options.baseUnit;\n            panRange.baseUnitStep = options.baseUnitStep || 1;\n            panRange.userSetBaseUnit = options.userSetBaseUnit;\n            panRange.userSetBaseUnitStep = options.userSetBaseUnitStep;\n\n            return panRange;\n        }\n    }\n\n    pointsRange(start, end) {\n        const pointsRange = super.pointsRange(start, end);\n        const datesRange = this.currentRange();\n        const indicesRange = this.rangeIndices();\n        const scale = dateDiff(datesRange.max, datesRange.min) / (indicesRange.max - indicesRange.min);\n        const options = this.options;\n\n        const min = addTicks(datesRange.min, pointsRange.min * scale);\n        const max = addTicks(datesRange.min, pointsRange.max * scale);\n\n        return {\n            min: min,\n            max: max,\n            baseUnit: options.userSetBaseUnit,\n            baseUnitStep: options.userSetBaseUnitStep\n        };\n    }\n\n    zoomRange(delta) {\n        const options = this.options;\n        const totalLimits = this.totalLimits();\n        let { weekStartDay, baseUnit } = options;\n        const baseUnitStep = options.baseUnitStep || 1;\n        const { min: rangeMin, max: rangeMax } = this.currentRange();\n        let min = addDuration(rangeMin, delta * baseUnitStep, baseUnit, weekStartDay);\n        let max = addDuration(rangeMax, -delta * baseUnitStep, baseUnit, weekStartDay);\n\n        if (options.userSetBaseUnit === FIT) {\n            const { autoBaseUnitSteps, maxDateGroups } = options;\n\n            const maxDiff = last(autoBaseUnitSteps[baseUnit]) * maxDateGroups * TIME_PER_UNIT[baseUnit];\n            const rangeDiff = dateDiff(rangeMax, rangeMin);\n            const diff = dateDiff(max, min);\n            let baseUnitIndex = BASE_UNITS.indexOf(baseUnit);\n            let autoBaseUnitStep, ticks;\n\n            if (diff < TIME_PER_UNIT[baseUnit] && baseUnit !== MILLISECONDS) {\n                baseUnit = BASE_UNITS[baseUnitIndex - 1];\n                autoBaseUnitStep = last(autoBaseUnitSteps[baseUnit]);\n                ticks = (rangeDiff - (maxDateGroups - 1) * autoBaseUnitStep * TIME_PER_UNIT[baseUnit]) / 2;\n                min = addTicks(rangeMin, ticks);\n                max = addTicks(rangeMax, -ticks);\n\n            } else if (diff > maxDiff && baseUnit !== YEARS) {\n                let stepIndex = 0;\n\n                do {\n                    baseUnitIndex++;\n                    baseUnit = BASE_UNITS[baseUnitIndex];\n                    stepIndex = 0;\n                    ticks = 2 * TIME_PER_UNIT[baseUnit];\n                    do {\n                        autoBaseUnitStep = autoBaseUnitSteps[baseUnit][stepIndex];\n                        stepIndex++;\n                    } while (stepIndex < autoBaseUnitSteps[baseUnit].length && ticks * autoBaseUnitStep < rangeDiff);\n                } while (baseUnit !== YEARS && ticks * autoBaseUnitStep < rangeDiff);\n\n                ticks = (ticks * autoBaseUnitStep - rangeDiff) / 2;\n                if (ticks > 0) {\n                    min = addTicks(rangeMin, -ticks);\n                    max = addTicks(rangeMax, ticks);\n                    min = addTicks(min, limitValue(max, totalLimits.min, totalLimits.max) - max);\n                    max = addTicks(max, limitValue(min, totalLimits.min, totalLimits.max) - min);\n                }\n            }\n        }\n\n        min = toDate(limitValue(min, totalLimits.min, totalLimits.max));\n        max = toDate(limitValue(max, totalLimits.min, totalLimits.max));\n\n        if (min && max && dateDiff(max, min) > 0) {\n            return {\n                min: min,\n                max: max,\n                baseUnit: options.userSetBaseUnit,\n                baseUnitStep: options.userSetBaseUnitStep\n            };\n        }\n    }\n\n    totalLimits() {\n        const options = this.options;\n        const datesRange = this.datesRange();\n\n        const min = this._roundToTotalStep(toDate(datesRange.min), options, false);\n        let max = datesRange.max;\n\n        if (!options.justified) {\n            max = this._roundToTotalStep(max, options, true, dateEquals(max, this._roundToTotalStep(max, options, false)));\n        }\n\n        return {\n            min: min,\n            max: max\n        };\n    }\n\n    range(rangeOptions) {\n        const options = rangeOptions || this.options;\n\n        const categories = options.categories;\n        const autoUnit = options.baseUnit === FIT;\n        const baseUnit = autoUnit ? BASE_UNITS[0] : options.baseUnit;\n        const baseUnitStep = options.baseUnitStep || 1;\n        const stepOptions = {\n            baseUnit: baseUnit,\n            baseUnitStep: baseUnitStep,\n            weekStartDay: options.weekStartDay\n        };\n        const categoryLimits = this._categoryRange(categories);\n        const min = toDate(options.min || categoryLimits.min);\n        const max = toDate(options.max || categoryLimits.max);\n\n        return {\n            min: this._roundToTotalStep(min, stepOptions, false),\n            max: this._roundToTotalStep(max, stepOptions, true, true)\n        };\n    }\n\n    autoBaseUnit(options) {\n        const categoryLimits = this._categoryRange(options.categories);\n        const span = toDate(options.max || categoryLimits.max) - toDate(options.min || categoryLimits.min);\n        const maxDateGroups = options.maxDateGroups || this.options.maxDateGroups;\n        const autoUnit = options.baseUnit === FIT;\n        let autoUnitIx = 0;\n        let baseUnit = autoUnit ? BASE_UNITS[autoUnitIx++] : options.baseUnit;\n        let units = span / TIME_PER_UNIT[baseUnit];\n        let totalUnits = units;\n        const autoBaseUnitSteps = deepExtend(\n            {}, this.options.autoBaseUnitSteps, options.autoBaseUnitSteps\n        );\n        let unitSteps, step, nextStep;\n\n        while (!step || units >= maxDateGroups) {\n            unitSteps = unitSteps || autoBaseUnitSteps[baseUnit].slice(0);\n            nextStep = unitSteps.shift();\n\n            if (nextStep) {\n                step = nextStep;\n                units = totalUnits / step;\n            } else if (baseUnit === last(BASE_UNITS)) {\n                step = Math.ceil(totalUnits / maxDateGroups);\n                break;\n            } else if (autoUnit) {\n                baseUnit = BASE_UNITS[autoUnitIx++] || last(BASE_UNITS);\n                totalUnits = span / TIME_PER_UNIT[baseUnit];\n                unitSteps = null;\n            } else {\n                if (units > maxDateGroups) {\n                    step = Math.ceil(totalUnits / maxDateGroups);\n                }\n                break;\n            }\n        }\n\n        options.baseUnitStep = step;\n        options.baseUnit = baseUnit;\n    }\n\n    groupCategories(options) {\n        const { categories, baseUnit } = options;\n        const baseUnitStep = options.baseUnitStep || 1;\n        const maxCategory = toDate(sparseArrayLimits(categories).max);\n        const { min, max } = this.range(options);\n        const groups = [];\n        let nextDate;\n\n        for (let date = min; date < max; date = nextDate) {\n            groups.push(date);\n\n            nextDate = addDuration(date, baseUnitStep, baseUnit, options.weekStartDay);\n            if (nextDate > maxCategory && !options.max) {\n                break;\n            }\n        }\n\n        options.srcCategories = categories;\n        options.categories = groups;\n    }\n\n    _roundToTotalStep(value, axisOptions, upper, roundToNext) {\n        const options = axisOptions || this.options;\n        const baseUnit = options.baseUnit;\n        const baseUnitStep = options.baseUnitStep || 1;\n        const start = this._groupsStart;\n\n        if (start) {\n            const step = dateIndex(value, start, baseUnit, baseUnitStep);\n            let roundedStep = upper ? Math.ceil(step) : Math.floor(step);\n            if (roundToNext) {\n                roundedStep++;\n            }\n            return addDuration(start, roundedStep * baseUnitStep, baseUnit, options.weekStartDay);\n        }\n\n        return addDuration(value, upper ? baseUnitStep : 0, baseUnit, options.weekStartDay);\n    }\n\n    createAxisLabel(index, labelOptions) {\n        const options = this.options;\n        const dataItem = options.dataItems ? options.dataItems[index] : null;\n        const date = options.categories[index];\n        const baseUnit = options.baseUnit;\n        const unitFormat = labelOptions.dateFormats[baseUnit];\n        let visible = true;\n\n        if (options.justified) {\n            const roundedDate = floorDate(date, baseUnit, options.weekStartDay);\n            visible = dateEquals(roundedDate, date);\n        } else if (!options.roundToBaseUnit) {\n            visible = !dateEquals(this.range().max, date);\n        }\n\n        if (visible) {\n            labelOptions.format = labelOptions.format || unitFormat;\n            const text = this.axisLabelText(date, dataItem, labelOptions);\n            if (text) {\n                return new AxisLabel(date, text, index, dataItem, labelOptions);\n            }\n        }\n    }\n\n    categoryIndex(value) {\n        const options = this.options;\n        const categories = options.categories;\n        let index = -1;\n\n        if (categories.length) {\n            index = Math.floor(dateIndex(toDate(value), categories[0], options.baseUnit, options.baseUnitStep || 1));\n        }\n\n        return index;\n    }\n\n    getSlot(a, b, limit) {\n        let start = a;\n        let end = b;\n\n        if (typeof start === OBJECT) {\n            start = this.categoryIndex(start);\n        }\n\n        if (typeof end === OBJECT) {\n            end = this.categoryIndex(end);\n        }\n\n        return super.getSlot(start, end, limit);\n    }\n\n    valueRange() {\n        const options = this.options;\n        const range = this._categoryRange(options.srcCategories || options.categories);\n\n        return {\n            min: toDate(range.min),\n            max: toDate(range.max)\n        };\n    }\n}\n\nsetDefaultOptions(DateCategoryAxis, {\n    type: DATE,\n    labels: {\n        dateFormats: DateLabelFormats\n    },\n    autoBaseUnitSteps: {\n        milliseconds: [ 1, 10, 100 ],\n        seconds: [ 1, 2, 5, 15, 30 ],\n        minutes: [ 1, 2, 5, 15, 30 ],\n        hours: [ 1, 2, 3 ],\n        days: [ 1, 2, 3 ],\n        weeks: [ 1, 2 ],\n        months: [ 1, 2, 3, 6 ],\n        years: [ 1, 2, 3, 5, 10, 25, 50 ]\n    },\n    maxDateGroups: 10\n});\n\nexport default DateCategoryAxis;\n"],"names":["const","super","let"],"mappings":"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"}