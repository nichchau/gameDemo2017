{"version":3,"file":"curve-processor.js","sources":["curve-processor.js"],"sourcesContent":["import { geometry as geom } from '@progress/kendo-drawing';\n\nimport { X, Y } from '../common/constants';\nimport { Class, last, round } from '../common';\n\nconst WEIGHT = 0.333;\nconst EXTREMUM_ALLOWED_DEVIATION = 0.01;\n\nclass CurveProcessor extends Class {\n\n    constructor(closed) {\n        super();\n\n        this.closed = closed;\n    }\n\n    process(dataPoints) {\n        const points = dataPoints.slice(0);\n        const segments = [];\n        let closed = this.closed;\n        let length = points.length;\n\n        if (length > 2) {\n            this.removeDuplicates(0, points);\n            length = points.length;\n        }\n\n        if (length < 2 || (length === 2 && points[0].equals(points[1]))) {\n            return segments;\n        }\n\n        let p0 = points[0];\n        let p1 = points[1];\n        let p2 = points[2];\n\n        segments.push(new geom.Segment(p0));\n\n        while (p0.equals(points[length - 1])) {\n            closed = true;\n            points.pop();\n            length--;\n        }\n\n        if (length === 2) {\n            const tangent = this.tangent(p0,p1, X, Y);\n\n            last(segments).controlOut(\n                this.firstControlPoint(tangent, p0, p1, X, Y)\n            );\n\n            segments.push(new geom.Segment(\n                p1,\n                this.secondControlPoint(tangent, p0, p1, X, Y)\n            ));\n\n            return segments;\n        }\n\n        let initialControlPoint, lastControlPoint;\n\n        if (closed) {\n            p0 = points[length - 1]; p1 = points[0]; p2 = points[1];\n            const controlPoints = this.controlPoints(p0, p1, p2);\n            initialControlPoint = controlPoints[1];\n            lastControlPoint = controlPoints[0];\n        } else {\n            const tangent = this.tangent(p0, p1, X,Y);\n            initialControlPoint = this.firstControlPoint(tangent, p0, p1, X, Y);\n        }\n\n        let cp0 = initialControlPoint;\n        for (let idx = 0; idx <= length - 3; idx++) {\n            this.removeDuplicates(idx, points);\n            length = points.length;\n            if (idx + 3 <= length) {\n                p0 = points[idx]; p1 = points[idx + 1]; p2 = points[idx + 2];\n                const controlPoints = this.controlPoints(p0,p1,p2);\n\n                last(segments).controlOut(cp0);\n                cp0 = controlPoints[1];\n\n                const cp1 = controlPoints[0];\n                segments.push(new geom.Segment(p1, cp1));\n            }\n        }\n\n        if (closed) {\n            p0 = points[length - 2]; p1 = points[length - 1]; p2 = points[0];\n            const controlPoints = this.controlPoints(p0, p1, p2);\n\n            last(segments).controlOut(cp0);\n            segments.push(new geom.Segment(\n                p1,\n                controlPoints[0]\n            ));\n\n            last(segments).controlOut(controlPoints[1]);\n            segments.push(new geom.Segment(\n                p2,\n                lastControlPoint\n            ));\n        } else {\n            const tangent = this.tangent(p1, p2, X, Y);\n\n            last(segments).controlOut(cp0);\n            segments.push(new geom.Segment(\n                p2,\n                this.secondControlPoint(tangent, p1, p2, X, Y)\n            ));\n        }\n\n        return segments;\n    }\n\n    removeDuplicates(idx, points) {\n        while (points[idx + 1] && (points[idx].equals(points[idx + 1]) || points[idx + 1].equals(points[idx + 2]))) {\n            points.splice(idx + 1, 1);\n        }\n    }\n\n    invertAxis(p0, p1, p2) {\n        let invertAxis = false;\n\n        if (p0.x === p1.x) {\n            invertAxis = true;\n        } else if (p1.x === p2.x) {\n            if ((p1.y < p2.y && p0.y <= p1.y) || (p2.y < p1.y && p1.y <= p0.y)) {\n                invertAxis = true;\n            }\n        } else {\n            const fn = this.lineFunction(p0,p1);\n            const y2 = this.calculateFunction(fn, p2.x);\n            if (!(p0.y <= p1.y && p2.y <= y2) &&\n                !(p1.y <= p0.y && p2.y >= y2)) {\n                invertAxis = true;\n            }\n        }\n\n        return invertAxis;\n    }\n\n    isLine(p0, p1, p2) {\n        const fn = this.lineFunction(p0, p1);\n        const y2 = this.calculateFunction(fn, p2.x);\n\n        return (p0.x === p1.x && p1.x === p2.x) || round(y2, 1) === round(p2.y, 1);\n    }\n\n    lineFunction(p1, p2) {\n        const a = (p2.y - p1.y) / (p2.x - p1.x);\n        const b = p1.y - a * p1.x;\n\n        return [ b, a ];\n    }\n\n    controlPoints(p0, p1, p2) {\n        let xField = X;\n        let yField = Y;\n        let restrict = false;\n        let switchOrientation = false;\n        let tangent;\n\n        if (this.isLine(p0, p1, p2)) {\n            tangent = this.tangent(p0, p1, X, Y);\n        } else {\n            const monotonic = {\n                x: this.isMonotonicByField(p0, p1, p2, X),\n                y: this.isMonotonicByField(p0, p1, p2, Y)\n            };\n\n            if (monotonic.x && monotonic.y) {\n                tangent = this.tangent(p0, p2, X, Y);\n                restrict = true;\n            } else {\n                if (this.invertAxis(p0, p1, p2)) {\n                    xField = Y;\n                    yField = X;\n                }\n\n                if (monotonic[xField]) {\n                    tangent = 0;\n                } else {\n                    let sign;\n                    if ((p2[yField] < p0[yField] && p0[yField] <= p1[yField]) ||\n                        (p0[yField] < p2[yField] && p1[yField] <= p0[yField])) {\n                        sign = numberSign((p2[yField] - p0[yField]) * (p1[xField] - p0[xField]));\n                    } else {\n                        sign = -numberSign((p2[xField] - p0[xField]) * (p1[yField] - p0[yField]));\n                    }\n\n                    tangent = EXTREMUM_ALLOWED_DEVIATION * sign;\n                    switchOrientation = true;\n                }\n            }\n        }\n\n        const secondControlPoint = this.secondControlPoint(tangent, p0, p1, xField, yField);\n\n        if (switchOrientation) {\n            const oldXField = xField;\n            xField = yField;\n            yField = oldXField;\n        }\n\n        const firstControlPoint = this.firstControlPoint(tangent, p1, p2, xField, yField);\n\n        if (restrict) {\n            this.restrictControlPoint(p0, p1, secondControlPoint, tangent);\n            this.restrictControlPoint(p1, p2, firstControlPoint, tangent);\n        }\n\n        return [ secondControlPoint, firstControlPoint ];\n    }\n\n    restrictControlPoint(p1, p2, cp, tangent) {\n        if (p1.y < p2.y) {\n            if (p2.y < cp.y) {\n                cp.x = p1.x + (p2.y - p1.y) / tangent;\n                cp.y = p2.y;\n            } else if (cp.y < p1.y) {\n                cp.x = p2.x - (p2.y - p1.y) / tangent;\n                cp.y = p1.y;\n            }\n        } else {\n            if (cp.y < p2.y) {\n                cp.x = p1.x - (p1.y - p2.y) / tangent;\n                cp.y = p2.y;\n            } else if (p1.y < cp.y) {\n                cp.x = p2.x + (p1.y - p2.y) / tangent;\n                cp.y = p1.y;\n            }\n        }\n    }\n\n    tangent(p0, p1, xField, yField) {\n        const x = p1[xField] - p0[xField];\n        const y = p1[yField] - p0[yField];\n        let tangent;\n\n        if (x === 0) {\n            tangent = 0;\n        } else {\n            tangent = y / x;\n        }\n\n        return tangent;\n    }\n\n    isMonotonicByField(p0, p1, p2, field) {\n        return (p2[field] > p1[field] && p1[field] > p0[field]) ||\n                    (p2[field] < p1[field] && p1[field] < p0[field]);\n    }\n\n    firstControlPoint(tangent, p0, p3, xField, yField) {\n        const t1 = p0[xField];\n        const t2 = p3[xField];\n        const distance = (t2 - t1) * WEIGHT;\n\n        return this.point(t1 + distance, p0[yField] + distance * tangent, xField, yField);\n    }\n\n    secondControlPoint(tangent, p0, p3, xField, yField) {\n        const t1 = p0[xField];\n        const t2 = p3[xField];\n        const distance = (t2 - t1) * WEIGHT;\n\n        return this.point(t2 - distance, p3[yField] - distance * tangent, xField, yField);\n    }\n\n    point(xValue, yValue, xField, yField) {\n        const controlPoint = new geom.Point();\n        controlPoint[xField] = xValue;\n        controlPoint[yField] = yValue;\n\n        return controlPoint;\n    }\n\n    calculateFunction(fn, x) {\n        const length = fn.length;\n        let result = 0;\n\n        for (let i = 0; i < length; i++) {\n            result += Math.pow(x,i) * fn[i];\n        }\n        return result;\n    }\n}\n\nfunction numberSign(value) {\n    return value <= 0 ? -1 : 1;\n}\n\nexport default CurveProcessor;"],"names":["const","super","tangent","controlPoints","let","this"],"mappings":"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"}