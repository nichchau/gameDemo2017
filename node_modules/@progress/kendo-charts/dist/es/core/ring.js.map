{"version":3,"file":"ring.js","sources":["ring.js"],"sourcesContent":["import Box from './box';\nimport Point from './point';\nimport { COORD_PRECISION, MAX_VALUE, MIN_VALUE } from '../common/constants';\nimport { Class, clockwise, rad, round } from '../common';\n\nclass Ring extends Class {\n\n    constructor(center, innerRadius, radius, startAngle, angle) {\n        super();\n\n        this.center = center;\n        this.innerRadius = innerRadius;\n        this.radius = radius;\n        this.startAngle = startAngle;\n        this.angle = angle;\n    }\n\n    clone() {\n        return new Ring(this.center, this.innerRadius, this.radius, this.startAngle, this.angle);\n    }\n\n    middle() {\n        return this.startAngle + this.angle / 2;\n    }\n\n    setRadius(newRadius, innerRadius) {\n        if (innerRadius) {\n            this.innerRadius = newRadius;\n        } else {\n            this.radius = newRadius;\n        }\n\n        return this;\n    }\n\n    // TODO: Remove and replace with Point.onCircle\n    point(angle, innerRadius) {\n        const radianAngle = rad(angle);\n        const ax = Math.cos(radianAngle);\n        const ay = Math.sin(radianAngle);\n        const radius = innerRadius ? this.innerRadius : this.radius;\n        const x = round(this.center.x - (ax * radius), COORD_PRECISION);\n        const y = round(this.center.y - (ay * radius), COORD_PRECISION);\n\n        return new Point(x, y);\n    }\n\n    adjacentBox(distance, width, height) {\n        const sector = this.clone().expand(distance);\n        const midAndle = sector.middle();\n        const midPoint = sector.point(midAndle);\n        const hw = width / 2;\n        const hh = height / 2;\n        const sa = Math.sin(rad(midAndle));\n        const ca = Math.cos(rad(midAndle));\n        let x = midPoint.x - hw;\n        let y = midPoint.y - hh;\n\n        if (Math.abs(sa) < 0.9) {\n            x += hw * -ca / Math.abs(ca);\n        }\n\n        if (Math.abs(ca) < 0.9) {\n            y += hh * -sa / Math.abs(sa);\n        }\n\n        return new Box(x, y, x + width, y + height);\n    }\n\n    containsPoint(p) {\n        const center = this.center;\n        const innerRadius = this.innerRadius;\n        const radius = this.radius;\n        const startAngle = this.startAngle;\n        const endAngle = this.startAngle + this.angle;\n        const dx = p.x - center.x;\n        const dy = p.y - center.y;\n        const vector = new Point(dx, dy);\n        const startPoint = this.point(startAngle);\n        const startVector = new Point(startPoint.x - center.x, startPoint.y - center.y);\n        const endPoint = this.point(endAngle);\n        const endVector = new Point(endPoint.x - center.x, endPoint.y - center.y);\n        const dist = round(dx * dx + dy * dy, COORD_PRECISION);\n\n        return (startVector.equals(vector) || clockwise(startVector, vector)) &&\n               !clockwise(endVector, vector) &&\n               dist >= innerRadius * innerRadius && dist <= radius * radius;\n    }\n\n    getBBox() {\n        const box = new Box(MAX_VALUE, MAX_VALUE, MIN_VALUE, MIN_VALUE);\n        const startAngle = round(this.startAngle % 360);\n        const endAngle = round((startAngle + this.angle) % 360);\n        const innerRadius = this.innerRadius;\n        const allAngles = [ 0, 90, 180, 270, startAngle, endAngle ].sort(numericComparer);\n        const startAngleIndex = allAngles.indexOf(startAngle);\n        const endAngleIndex = allAngles.indexOf(endAngle);\n        let angles;\n\n        if (startAngle === endAngle) {\n            angles = allAngles;\n        } else {\n            if (startAngleIndex < endAngleIndex) {\n                angles = allAngles.slice(startAngleIndex, endAngleIndex + 1);\n            } else {\n                angles = [].concat(\n                    allAngles.slice(0, endAngleIndex + 1),\n                    allAngles.slice(startAngleIndex, allAngles.length)\n                );\n            }\n        }\n\n        for (let i = 0; i < angles.length; i++) {\n            let point = this.point(angles[i]);\n            box.wrapPoint(point);\n            box.wrapPoint(point, innerRadius);\n        }\n\n        if (!innerRadius) {\n            box.wrapPoint(this.center);\n        }\n\n        return box;\n    }\n\n    expand(value) {\n        this.radius += value;\n        return this;\n    }\n}\n\nfunction numericComparer(a, b) {\n    return a - b;\n}\n\nexport default Ring;"],"names":["super","const","let","this"],"mappings":"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"}