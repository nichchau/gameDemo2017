{"version":3,"file":"numeric-axis.js","sources":["numeric-axis.js"],"sourcesContent":["\nimport Axis from './axis';\nimport AxisLabel from './axis-label';\nimport Box from './box';\n\nimport { BLACK, DEFAULT_PRECISION, COORD_PRECISION, X, Y } from '../common/constants';\nimport { deepExtend, defined, limitValue, round, setDefaultOptions } from '../common';\n\nimport autoMajorUnit from './utils/auto-major-unit';\nimport autoAxisMin from './utils/auto-axis-min';\nimport autoAxisMax from './utils/auto-axis-max';\nimport floor from './utils/floor';\nimport ceil from './utils/ceil';\nimport limitCoordinate from './utils/limit-coordinate';\n\nconst MIN_VALUE_RANGE = Math.pow(10, -DEFAULT_PRECISION + 1);\n\nclass NumericAxis extends Axis {\n\n    constructor(seriesMin, seriesMax, options, chartService) {\n        const autoOptions = autoAxisOptions(seriesMin, seriesMax, options);\n        const totalOptions = totalAxisOptions(autoOptions, options);\n\n        super(axisOptions(autoOptions, options), chartService);\n\n        this.totalMin = totalOptions.min;\n        this.totalMax = totalOptions.max;\n        this.totalMajorUnit = totalOptions.majorUnit;\n        this.seriesMin = seriesMin;\n        this.seriesMax = seriesMax;\n    }\n\n    startValue() {\n        return 0;\n    }\n\n    range() {\n        const options = this.options;\n        return { min: options.min, max: options.max };\n    }\n\n    getDivisions(stepValue) {\n        if (stepValue === 0) {\n            return 1;\n        }\n\n        const options = this.options;\n        const range = options.max - options.min;\n\n        return Math.floor(round(range / stepValue, COORD_PRECISION)) + 1;\n    }\n\n    getTickPositions(unit, skipUnit) {\n        const options = this.options;\n        const { vertical, reverse } = options;\n        const lineBox = this.lineBox();\n        const lineSize = vertical ? lineBox.height() : lineBox.width();\n        const range = options.max - options.min;\n        const scale = lineSize / range;\n        const step = unit * scale;\n        const divisions = this.getDivisions(unit);\n        const dir = (vertical ? -1 : 1) * (reverse ? -1 : 1);\n        const startEdge = dir === 1 ? 1 : 2;\n        const positions = [];\n        let pos = lineBox[(vertical ? Y : X) + startEdge];\n        let skipStep = 0;\n\n        if (skipUnit) {\n            skipStep = skipUnit / unit;\n        }\n\n        for (let idx = 0; idx < divisions; idx++) {\n            if (idx % skipStep !== 0) {\n                positions.push(round(pos, COORD_PRECISION));\n            }\n\n            pos = pos + step * dir;\n        }\n\n        return positions;\n    }\n\n    getMajorTickPositions() {\n        return this.getTickPositions(this.options.majorUnit);\n    }\n\n    getMinorTickPositions() {\n        return this.getTickPositions(this.options.minorUnit);\n    }\n\n    getSlot(a, b, limit = false) {\n        const options = this.options;\n        const { vertical, reverse } = options;\n        const valueAxis = vertical ? Y : X;\n        const lineBox = this.lineBox();\n        const lineStart = lineBox[valueAxis + (reverse ? 2 : 1)];\n        const lineSize = vertical ? lineBox.height() : lineBox.width();\n        const dir = reverse ? -1 : 1;\n        const step = dir * (lineSize / (options.max - options.min));\n        const slotBox = new Box(lineBox.x1, lineBox.y1, lineBox.x1, lineBox.y1);\n\n        let start = a;\n        let end = b;\n\n        if (!defined(start)) {\n            start = end || 0;\n        }\n\n        if (!defined(end)) {\n            end = start || 0;\n        }\n\n        if (limit) {\n            start = Math.max(Math.min(start, options.max), options.min);\n            end = Math.max(Math.min(end, options.max), options.min);\n        }\n\n        let p1, p2;\n\n        if (vertical) {\n            p1 = options.max - Math.max(start, end);\n            p2 = options.max - Math.min(start, end);\n        } else {\n            p1 = Math.min(start, end) - options.min;\n            p2 = Math.max(start, end) - options.min;\n        }\n\n        slotBox[valueAxis + 1] = limitCoordinate(lineStart + step * (reverse ? p2 : p1));\n        slotBox[valueAxis + 2] = limitCoordinate(lineStart + step * (reverse ? p1 : p2));\n\n        return slotBox;\n    }\n\n    getValue(point) {\n        const options = this.options;\n        const { vertical, reverse } = options;\n        const max = Number(options.max);\n        const min = Number(options.min);\n        const valueAxis = vertical ? Y : X;\n        const lineBox = this.lineBox();\n        const lineStart = lineBox[valueAxis + (reverse ? 2 : 1)];\n        const lineSize = vertical ? lineBox.height() : lineBox.width();\n        const dir = reverse ? -1 : 1;\n        const offset = dir * (point[valueAxis] - lineStart);\n        const step = (max - min) / lineSize;\n        const valueOffset = offset * step;\n\n        if (offset < 0 || offset > lineSize) {\n            return null;\n        }\n\n        const value = vertical ?\n                max - valueOffset :\n                min + valueOffset;\n\n        return round(value, DEFAULT_PRECISION);\n    }\n\n    translateRange(delta) {\n        const options = this.options;\n        const { vertical, reverse, max, min } = options;\n        const lineBox = this.lineBox();\n        const size = vertical ? lineBox.height() : lineBox.width();\n        const range = max - min;\n        const scale = size / range;\n        let offset = round(delta / scale, DEFAULT_PRECISION);\n\n        if ((vertical || reverse) && !(vertical && reverse )) {\n            offset = -offset;\n        }\n\n        return {\n            min: min + offset,\n            max: max + offset\n        };\n    }\n\n    scaleRange(delta) {\n        const options = this.options;\n        const offset = -delta * options.majorUnit;\n\n        return {\n            min: options.min - offset,\n            max: options.max + offset\n        };\n    }\n\n    labelsCount() {\n        return this.getDivisions(this.options.majorUnit);\n    }\n\n    createAxisLabel(index, labelOptions) {\n        const options = this.options;\n        const value = round(options.min + (index * options.majorUnit), DEFAULT_PRECISION);\n        const text = this.axisLabelText(value, null, labelOptions);\n\n        return new AxisLabel(value, text, index, null, labelOptions);\n    }\n\n    shouldRenderNote(value) {\n        const range = this.range();\n        return range.min <= value && value <= range.max;\n    }\n\n    pan(delta) {\n        const range = this.translateRange(delta);\n        return this.limitRange(range.min, range.max, this.totalMin, this.totalMax);\n    }\n\n    pointsRange(start, end) {\n        const startValue = this.getValue(start);\n        const endValue = this.getValue(end);\n        const min = Math.min(startValue, endValue);\n        const max = Math.max(startValue, endValue);\n\n        if (this.isValidRange(min, max)) {\n            return {\n                min: min,\n                max: max\n            };\n        }\n    }\n\n    zoomRange(delta) {\n        const { totalMin, totalMax } = this;\n        const newRange = this.scaleRange(delta);\n        const min = limitValue(newRange.min, totalMin, totalMax);\n        const max = limitValue(newRange.max, totalMin, totalMax);\n\n        if (this.isValidRange(min, max)) {\n            return {\n                min: min,\n                max: max\n            };\n        }\n    }\n\n    isValidRange(min, max) {\n        return max - min > MIN_VALUE_RANGE;\n    }\n}\n\nfunction autoAxisOptions(seriesMin, seriesMax, options) {\n    const narrowRange = options.narrowRange;\n\n    let autoMin = autoAxisMin(seriesMin, seriesMax, narrowRange);\n    let autoMax = autoAxisMax(seriesMin, seriesMax, narrowRange);\n\n    const majorUnit = autoMajorUnit(autoMin, autoMax);\n    const autoOptions = {\n        majorUnit: majorUnit\n    };\n\n    if (options.roundToMajorUnit !== false) {\n        if (autoMin < 0 && remainderClose(autoMin, majorUnit, 1 / 3)) {\n            autoMin -= majorUnit;\n        }\n\n        if (autoMax > 0 && remainderClose(autoMax, majorUnit, 1 / 3)) {\n            autoMax += majorUnit;\n        }\n    }\n\n    autoOptions.min = floor(autoMin, majorUnit);\n    autoOptions.max = ceil(autoMax, majorUnit);\n\n    return autoOptions;\n}\n\nfunction totalAxisOptions(autoOptions, options) {\n    return {\n        min: defined(options.min) ? Math.min(autoOptions.min, options.min) : autoOptions.min,\n        max: defined(options.max) ? Math.max(autoOptions.max, options.max) : autoOptions.max,\n        majorUnit: autoOptions.majorUnit\n    };\n}\n\nfunction axisOptions(autoOptions, userOptions) {\n    let options = userOptions;\n    if (userOptions) {\n        const userSetLimits = defined(userOptions.min) || defined(userOptions.max);\n        if (userSetLimits) {\n            if (userOptions.min === userOptions.max) {\n                if (userOptions.min > 0) {\n                    userOptions.min = 0;\n                } else {\n                    userOptions.max = 1;\n                }\n            }\n        }\n\n        if (userOptions.majorUnit) {\n            autoOptions.min = floor(autoOptions.min, userOptions.majorUnit);\n            autoOptions.max = ceil(autoOptions.max, userOptions.majorUnit);\n        } else if (userSetLimits) {\n            options = deepExtend(autoOptions, userOptions);\n\n            // Determine an auto major unit after min/max have been set\n            autoOptions.majorUnit = autoMajorUnit(options.min, options.max);\n        }\n    }\n\n    autoOptions.minorUnit = (options.majorUnit || autoOptions.majorUnit) / 5;\n\n    return deepExtend(autoOptions, options);\n}\n\nfunction remainderClose(value, divisor, ratio) {\n    const remainder = round(Math.abs(value % divisor), DEFAULT_PRECISION);\n    const threshold = divisor * (1 - ratio);\n\n    return remainder === 0 || remainder > threshold;\n}\n\nsetDefaultOptions(NumericAxis, {\n    type: \"numeric\",\n    min: 0,\n    max: 1,\n    vertical: true,\n    majorGridLines: {\n        visible: true,\n        width: 1,\n        color: BLACK\n    },\n    labels: {\n        format: \"#.####################\"\n    },\n    zIndex: 1\n});\n\nexport default NumericAxis;"],"names":["const","super","let"],"mappings":"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"}